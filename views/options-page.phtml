<?php
/**
 * @package WP Static HTML Output
 *
 * Copyright (c) 2011 Leon Stafford
 */

$settings = esc_html($this->staticExportSettings);
if ($settings == '') {
    $settings = 'no existing settings found';
}

$ajax_nonce = wp_create_nonce( 'wpstatichtmloutput' );

?>

<script>
var settings = '<?php echo $settings; ?>';
var uploadsDir = '<?php echo $this->wpUploadsDir; ?>';
var pluginDir = '<?php echo $this->wpPluginDir; ?>';
var pollingInterval = 5000;
var exportTargets = [];

jQuery(document).ready(function($){
    if (Notification.permission !== "granted") {
        Notification.requestPermission();
    }

    function notifyMe() {
      if (!Notification) {
        alert('All exports are complete!.'); 
        return;
      }

      if (Notification.permission !== "granted") {
        Notification.requestPermission();
      } else {
        var notification = new Notification('WP Static HTML Export', {
          icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Wordpress_Shiny_Icon.svg/768px-Wordpress_Shiny_Icon.svg.png',
          body: "Exports have finished!",
        });

        notification.onclick = function () {
          parent.focus();
          window.focus();
          this.close();
        };
      }
    }

	/* 
		event handler
		show any export setting details if the export option is enabled
	*/

	function setExportSettingDetailsVisibility(changed_checkbox) {
		// get name of changed checkbox, ie sendViaGitHub
		checkbox_name = $(changed_checkbox).attr('name');

		// rm "sendVia" and lowercase the rest, leaving "github"
		export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

		// find all inputs starting with the name, ie "githubRepo"
		var export_option_elements = $('.' + export_option_name );

		// log which checkbox has changed in order to process it's settings group visibility
        if($(changed_checkbox).is(":checked")) {
			export_option_elements.show();
			// unhide all the inputs, the following span and the following br
			
        } else {
			// hide all the inputs, the following span and the following br
			export_option_elements.hide();
		}
	}

	// call handler on any checkbox change events
	$('input[type="checkbox"]').change(function() {
		setExportSettingDetailsVisibility(this);
    });


    var currentArchive = 1;

	/*

		doAJAXExport can handle from 1 to n actions
		each action runs, with 3 possible results:
			SUCCESS - action is complete
			> 0 - action is in progress inremental task
			ERROR
				
			if an action is successful, and there are other actions queued up,
			it will call the function again with the remaining arguments/actions

			if an action is succesful, and there are no other actions queued,
			it will call processExportTargets() to continue any other exports

			if an action is in progress incremental, it will call itself again,
			with all the same arguments

			if an action fails, ajaxErrorHandler() is called
	*/

	function doAJAXExport() {
		// arguments is not a real array, avoid nastiness by capturing as such
		var args = [];
		for (var i = 0; i < arguments.length; ++i) args[i] = arguments[i];

		var export_action = args[0];

        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val(export_action);
        archives = $('.options-form');
        data = $(archives[0]).serialize();

        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
				// if an action is successful, and there are other actions queued up
				if (serverResponse === 'SUCCESS' && args.length > 1) {
					// rm first action now that it's succeeded
					args.shift();
					// call function with all other actions
					doAJAXExport.apply(this, args);

				// if an action is in progress incremental, it will call itself again
				} else if (serverResponse > 0) {
					doAJAXExport.apply(this, args);
				} else if (serverResponse === 'SUCCESS') {
					// not an incremental action, continue on with export targets
					processExportTargets();
				} else {
					ajaxErrorHandler();
				}
            },
            error: ajaxErrorHandler
        });
	}

    function startExport() {
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('start_export');
        archives = $('.options-form');

        if ($('#sendViaGithub').attr('checked') == 'checked') {
            exportTargets.push('GITHUB');
        }
        if ($('#sendViaFTP').attr('checked') == 'checked') {
            exportTargets.push('FTP');
        }
        if ($('#sendViaBUNNYCDN').attr('checked') == 'checked') {
            exportTargets.push('BUNNYCDN');
        }
        if ($('#sendViaDropbox').attr('checked') == 'checked') {
            exportTargets.push('DROPBOX');
        }
        if ($('#sendViaS3').attr('checked') == 'checked') {
            exportTargets.push('S3');
        }
        if ($('#sendViaNetlify').attr('checked') == 'checked') {
            exportTargets.push('NETLIFY');
        }

		// always run cleanup "exportTarget" (TODO: naming to be improved)
		exportTargets.push('TEARDOWN');

        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
				if ($('#createZip').attr('checked') == 'checked') {
					doAJAXExport('crawl_site', 'create_zip');
				} else {
					doAJAXExport('crawl_site');
				}
            },
            error: ajaxErrorHandler
        });
    }
    
    function ajaxErrorHandler () {
        $('#progress').attr("src", pluginDir + '../images/fail_icon.png');
        $('#progress').css("width", '123px');
    }

    function processExportTargets () {
		// TODO: optimisation: just call doAJAXExport with shifted arr element (req's consistent naming of exports)

		if( exportTargets.length > 0) {
			switch(target = exportTargets.shift()) {
				case 'GITHUB':
					doAJAXExport('github_prepare_export', 'github_upload_blobs', 'github_finalise_export');
					break;

				case 'FTP':
					doAJAXExport('ftp_prepare_export', 'ftp_transfer_files');
					break;

				case 'BUNNYCDN':
					doAJAXExport('bunnycdn_prepare_export', 'bunnycdn_transfer_files');
					break;

				case 'S3':
					doAJAXExport('s3_prepare_export', 's3_transfer_files', 'cloudfront_invalidate_all_items');
					break;

				case 'DROPBOX':
					doAJAXExport('dropbox_do_export');
					break;

				case 'NETLIFY':
					doAJAXExport('netlify_do_export');
					break;

				case 'TEARDOWN':
					doAJAXExport('post_export_teardown');
					break;

				default:
					$('#progress').attr("src", pluginDir + '../images/greentick.png');
					$('#progress').css("width", '123px');
					notifyMe();
					break; 
			}
		} else {
			$('#progress').attr("src", pluginDir + '../images/greentick.png');
			$('#progress').css("width", '123px');
			notifyMe();
		}
    }

    function saveOptions() {
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('save_options');
        archives = $('.options-form');
        newSettings = $(".options-form").serialize();
        $(".hiddenSettingsField").val(newSettings);
        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
                $('#progress').hide();
                alert('Options have been saved');
            },
            error: function(serverResponse) {
                $('#progress').hide();
            }
        });
    }

    $('#startExportButton').click(function() {
		// set progress image back to original src
		
        $('#progress').attr("src", pluginDir + '../images/dashinfinity.gif');
        $('#progress').css("width", '102px');

        $('#progress').show();
        $('#donateText').show();
        startExport();
        $('#exportStatus').html('');
        pollingInterval = $('#pollIntervalSetting')[0].value;
        setTimeout(pollStatus, pollingInterval);
    });


    function pollStatus() {
        logFile = uploadsDir + '/WP-STATIC-EXPORT-LOG';

        $.get(logFile, function(data){
            $('#exportStatus').html(data);
            heightLimit = 1000;
            $('#exportStatus').css('height', Math.min($('#exportStatus').prop('scrollHeight'), heightLimit) + "px");
        });
        
        if ($('#progress').attr("src").includes('infinity')) {
            setTimeout(pollStatus, pollingInterval);
        }         
    }

    $('.wrap').on('click', '.removeTargetButton', function(event) {
        event.preventDefault();

        if ($('.options-form').length === 1) {
            alert("Sorry, got to keep at least one settings block around. But, you can delete the values if you like");
        } else {
            $(event.target).closest('.options-form').remove();
        }
    });

    $('.wrap').on('click', '.saveSettingsButton', function(event) {
        event.preventDefault();
        $('#progress').show();
        saveOptions();
    });

    $('.wrap').on('click', '.addAnotherTargetButton', function(event) {
        event.preventDefault();
       $('.options-form:last').clone().insertAfter('.options-form:last');
    });

    //  load existing settings
    if (settings != 'no existing settings found') {
        archives = settings.split('baseUrl=');
        // remove crufty first element
        archives.shift();

        // first run, will populate only form on page
        var targetExportSettingsBlock = $('.options-form')[0];

        // iterate each saved settings chunk and create forms for them
        $.each(archives, function(index, value) {
            renderedExportSettingsBlocks = $('.options-form').length;
            targetExportSettingsBlock = $('.options-form:last');
            archive = 'baseUrl=' + value;
            archive = archive.substring(0, archive.indexOf('&amp;staticExportSettings='));

            settingsBlock = JSON.parse('{"' + decodeURI(archive).replace(/\n/g, ",").replace(/\r/g, ",").replace(/"/g, '\\"').replace(/&amp;/g, '","').replace(/=/g,'":"') + '"}');
        
            $(targetExportSettingsBlock).find('#baseUrl').first().val(decodeURIComponent(settingsBlock.baseUrl));

            $(targetExportSettingsBlock).find('#outputDirectory').val(decodeURIComponent(settingsBlock.outputDirectory));

            additionalUrls = settingsBlock.additionalUrls.split(',');
            newAdditionalUrls = '';

            $.each(additionalUrls, function(index, value) {
               if (value != '') {
                   newAdditionalUrls += decodeURIComponent(value) + "\n"; 
               }
            });

            $(targetExportSettingsBlock).find('#additionalUrls').val(newAdditionalUrls);
            $(targetExportSettingsBlock).find('#createZip')[0].checked = settingsBlock.createZip;
            $(targetExportSettingsBlock).find('#retainStaticFiles')[0].checked = settingsBlock.retainStaticFiles;
            $(targetExportSettingsBlock).find('#retainZipFile')[0].checked = settingsBlock.retainZipFile;
            $(targetExportSettingsBlock).find('#sendViaFTP')[0].checked = settingsBlock.sendViaFTP;
            $(targetExportSettingsBlock).find('#ftpServer').first().val(decodeURIComponent(settingsBlock.ftpServer));
            $(targetExportSettingsBlock).find('#ftpUsername').first().val(decodeURIComponent(settingsBlock.ftpUsername));
            $(targetExportSettingsBlock).find('#ftpPassword').first().val(decodeURIComponent(settingsBlock.ftpPassword));
            $(targetExportSettingsBlock).find('#ftpRemotePath').first().val(decodeURIComponent(settingsBlock.ftpRemotePath));
            $(targetExportSettingsBlock).find('#sendViaBUNNYCDN')[0].checked = settingsBlock.sendViaBUNNYCDN;
            $(targetExportSettingsBlock).find('#bunnycdnPullZoneName').first().val(decodeURIComponent(settingsBlock.bunnycdnPullZoneName));
            $(targetExportSettingsBlock).find('#bunnycdnAPIKey').first().val(decodeURIComponent(settingsBlock.bunnycdnAPIKey));
            $(targetExportSettingsBlock).find('#bunnycdnPath').first().val(decodeURIComponent(settingsBlock.bunnycdnPath));
            $(targetExportSettingsBlock).find('#sendViaS3')[0].checked = settingsBlock.sendViaS3;
            $(targetExportSettingsBlock).find('#s3Key').first().val(decodeURIComponent(settingsBlock.s3Key));
            $(targetExportSettingsBlock).find('#s3Secret').first().val(decodeURIComponent(settingsBlock.s3Secret));
            $(targetExportSettingsBlock).find('#s3Region').first().val(decodeURIComponent(settingsBlock.s3Region));
            $(targetExportSettingsBlock).find('#s3Bucket').first().val(decodeURIComponent(settingsBlock.s3Bucket));
            $(targetExportSettingsBlock).find('#cfDistributionId').first().val(decodeURIComponent(settingsBlock.cfDistributionId));
            $(targetExportSettingsBlock).find('#sendViaDropbox')[0].checked = settingsBlock.sendViaDropbox;
            $(targetExportSettingsBlock).find('#dropboxAppKey').first().val(decodeURIComponent(settingsBlock.dropboxAppKey));
            $(targetExportSettingsBlock).find('#dropboxAppSecret').first().val(decodeURIComponent(settingsBlock.dropboxAppSecret));
            $(targetExportSettingsBlock).find('#dropboxAccessToken').first().val(decodeURIComponent(settingsBlock.dropboxAccessToken));
            $(targetExportSettingsBlock).find('#dropboxFolder').first().val(decodeURIComponent(settingsBlock.dropboxFolder));
            $(targetExportSettingsBlock).find('#sendViaGithub')[0].checked = settingsBlock.sendViaGithub;
            $(targetExportSettingsBlock).find('#githubPersonalAccessToken').first().val(decodeURIComponent(settingsBlock.githubPersonalAccessToken));
            $(targetExportSettingsBlock).find('#githubPath').first().val(decodeURIComponent(settingsBlock.githubPath));
            $(targetExportSettingsBlock).find('#githubRepo').first().val(decodeURIComponent(settingsBlock.githubRepo));
            $(targetExportSettingsBlock).find('#githubBranch').first().val(decodeURIComponent(settingsBlock.githubBranch));
            $(targetExportSettingsBlock).find('#sendViaNetlify')[0].checked = settingsBlock.sendViaNetlify;
            $(targetExportSettingsBlock).find('#netlifyPersonalAccessToken').first().val(decodeURIComponent(settingsBlock.netlifyPersonalAccessToken));
            $(targetExportSettingsBlock).find('#netlifySiteID').first().val(decodeURIComponent(settingsBlock.netlifySiteID));


            // if there are more to come, clone and set target
            if (index < (archives.length -1)) {
                $('.options-form:last').clone().insertAfter('.options-form:last');
                targetExportSettingsBlock =  $('.options-form:last');
                $(targetExportSettingsBlock).find('#baseUrl').first().val('');
                $(targetExportSettingsBlock).find('#outputDirectory').val('');
                $(targetExportSettingsBlock).find('#additionalUrls').val('');
                $(targetExportSettingsBlock).find('#createZip').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#retainStaticFiles').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#retainZipFile').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#sendViaFTP').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#ftpServer').val('');
                $(targetExportSettingsBlock).find('#ftpUsername').val('');
                $(targetExportSettingsBlock).find('#ftpPassword').val('');
                $(targetExportSettingsBlock).find('#ftpRemotePath').val('');
                $(targetExportSettingsBlock).find('#sendViaBUNNYCDN').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#bunnycdnPullZoneName').val('');
                $(targetExportSettingsBlock).find('#bunnycdnAPIKey').val('');
                $(targetExportSettingsBlock).find('#bunnycdnPath').val('');
                $(targetExportSettingsBlock).find('#sendViaS3').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#s3Key').val('');
                $(targetExportSettingsBlock).find('#s3Secret').val('');
                $(targetExportSettingsBlock).find('#s3Region').val('');
                $(targetExportSettingsBlock).find('#s3Bucket').val('');
                $(targetExportSettingsBlock).find('#cfDistributionId').val('');
                $(targetExportSettingsBlock).find('#sendViaDropbox').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#dropboxAppKey').val('');
                $(targetExportSettingsBlock).find('#dropboxAppSecret').val('');
                $(targetExportSettingsBlock).find('#dropboxAccessToken').val('');
                $(targetExportSettingsBlock).find('#dropboxFolder').val('');
                $(targetExportSettingsBlock).find('#sendViaGithub').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#githubPersonalAccessToken').val('');
                $(targetExportSettingsBlock).find('#githubPath').val('');
                $(targetExportSettingsBlock).find('#githubRepo').val('');
                $(targetExportSettingsBlock).find('#githubBranch').val('');
                $(targetExportSettingsBlock).find('#sendViaNetlify').first().prop('checked', false);
                $(targetExportSettingsBlock).find('#netlifyPersonalAccessToken').val('');
                $(targetExportSettingsBlock).find('#netlifySiteID').val('');
            }
        });
    }

	/* 
		on page load, show enabed export setting details
		show any export setting details if the export option is enabled
	*/

	// do for each checkbox starting with sendVia


	$( 'input[id^="sendVia"]' ).each(function( index ) {
		checkbox_name = $(this).attr('name');

		// rm "sendVia" and lowercase the rest, leaving "github"
		export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

		// find all inputs starting with the name, ie "githubRepo"
		var export_option_elements = $('.' + export_option_name );

		// log which checkbox has changed in order to process it's settings group visibility
		if($(this).is(":checked")) {
			export_option_elements.show();
			// unhide all the inputs, the following span and the following br
			
		} else {
			// hide all the inputs, the following span and the following br
			export_option_elements.hide();
		}
	});
});
</script>

<div class="wrap">
	
	<h2><?php echo __('WP Static HTML Output - Configure & Run', 'static-html-output-plugin');?></h2>

	<div class="postbox-container">
		<div class="metabox-holder">
			<div class="meta-box-sortables ui-sortable">

				<form id="general-options" class="options-form" method="post" action="">

					<div class="postbox">

              <h3>
                <span><?php echo __('Configurable options', 'static-html-output-plugin');?></span>
              </h3>

              <div class="inside">
                <p>
                  <strong><label for="baseUrl"><?php echo __('Base Url', 'static-html-output-plugin');?></label></strong>
                  <p>
                    <i><?php echo __("This defaults to your WordPress Site URL. If you know the URL of where you'll be hosting the static version of your site, it will be good to change this to that, ie http://mystaticsite.github.io!", 'static-html-output-plugin');?></i>
                  </p> 
                  <input type="text" id="baseUrl" name="baseUrl" value="<?php echo esc_attr($this->baseUrl) ?>" size="50" />
                </p>

                <p>
                  <strong><label for="outputDirectory"><?php echo __('Output Directory', 'static-html-output-plugin');?></label></strong>
                  <p>
                    <i>This defaults to your WordPress uploads directory. Ex: <?php $default_upload_dir = wp_upload_dir(); echo $default_upload_dir['path']; ?></i>
                  </p> 
                  <input type="text" id="outputDirectory" name="outputDirectory" value="<?php echo esc_html($this->outputDirectory) ?>" size="50" />
                </p>
                
                <p>
                  <strong><label for="additionalUrls"><?php echo __('Additional Urls', 'static-html-output-plugin');?></label></strong>
                  <p>
                    <i>For a few themes, certain files may not be detected as part of the export process. Enter any such files here, one per line.

                    Enter them as the full URL, including your WordPress site url, ie:</i>
<pre>http://localhost/wp-content/themes/twentyseventeen/banana.jpg
http://172.17.0.3/my_pricelist.pdf</pre>
                  </p>
                  <textarea class="widefat" name="additionalUrls" id="additionalUrls" rows="5" cols="10"><?php echo esc_html($this->additionalUrls) ?></textarea>
                </p>

                <fieldset>
                    <label for="createZip">
                        <input name="createZip" id="createZip" value="1" type="checkbox" <?php if ($this->createZip == 1) echo "checked"; ?> />
                        <span><?php echo __('Create a ZIP file of your static site', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>
                
                <fieldset>
                    <label for="retainStaticFiles">
                        <input name="retainStaticFiles" id="retainStaticFiles" value="1" type="checkbox" <?php if ($this->retainStaticFiles == 1) echo "checked"; ?> />
                        <span><?php echo __('Retain generated static files on server', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

                <fieldset>
                    <label for="retainZipFile">
                        <input name="retainZipFile" id="retainZipFile" value="1" type="checkbox" <?php if ($this->retainZipFile == 1) echo "checked"; ?> />
                        <span><?php echo __('Retain generated zip file on server', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

                <fieldset>
                    <label for="sendViaFTP">
                    <input name="sendViaFTP" id="sendViaFTP" value="1" type="checkbox" <?php if ($this->sendViaFTP == 1) echo "checked"; ?> />
                        <span><?php echo __('Transfer files via FTP', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

<span class="ftp">
                <input name="ftpServer" class="regular-text" id="ftpServer" value="<?php echo esc_attr($this->ftpServer) ?>" placeholder="<?php echo __('FTP Server', 'static-html-output-plugin');?>" />
                <span class="description">ie, localhost, 192.168.1.7, ftp.mydomain.com, etc</span>
                <br>

                <input name="ftpUsername" class="regular-text" id="ftpUsername" value="<?php echo esc_attr($this->ftpUsername) ?>" placeholder="<?php echo __('FTP Username', 'static-html-output-plugin');?>" />
                <br>

                <input class="regular-text" name="ftpPassword" id="ftpPassword" type="password" value="" placeholder="<?php echo __('FTP Password', 'static-html-output-plugin');?>" />
                <br>

                <input class="regular-text" name="ftpRemotePath" id="ftpRemotePath" value="<?php echo esc_attr($this->ftpRemotePath) ?>" placeholder="<?php echo __('FTP Remote Path', 'static-html-output-plugin');?>" />
                <span class="description">will attempt to create folder recursively if non-existent</span>
                <br>
                <br>
</span>            

                <fieldset>
                    <label for="sendViaS3">
                    <input name="sendViaS3" id="sendViaS3" value="1" type="checkbox" <?php if ($this->sendViaS3 == 1) echo "checked"; ?> />
                        <span><?php echo __('Transfer files via S3', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

<span class="s3">
                <input name="s3Key" class="regular-text" id="s3Key" value="<?php echo esc_attr($this->s3Key) ?>" placeholder="<?php echo __('S3 Key', 'static-html-output-plugin');?>" />
                <span class="description">ie, AKIAIOSFODNN7EXAMPLE</span>
                <br>


                <input name="s3Secret" class="regular-text" id="s3Secret" value="<?php echo esc_attr($this->s3Secret) ?>" placeholder="<?php echo __('S3 Secret', 'static-html-output-plugin');?>" />
                <span class="description">ie, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span>
                <br>

                <!-- check regions available at: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region -->

                <select name="s3Region" id="s3Region">
                    <option value="us-east-1">US East (N. Virginia)</option>
                    <option value="us-east-2">US East (Ohio)</option>
                    <option value="us-west-1">US West (N. California)</option>
                    <option value="us-west-2">US West (Oregon)</option>
                    <option value="ca-central-1">Canada (Central)</option>
                    <option value="ap-south-1">Asia Pacific (Mumbai)</option>
                    <option value="ap-northeast-2">Asia Pacific (Seoul)</option>
                    <option value="ap-southeast-1">Asia Pacific (Singapore)</option>
                    <option value="ap-southeast-2">Asia Pacific (Sydney)</option>
                    <option value="ap-northeast-1">Asia Pacific (Tokyo)</option>
                    <option value="eu-central-1">EU (Frankfurt)</option>
                    <option value="eu-west-1">EU (Ireland)</option>
                    <option value="eu-west-2">EU (London)</option>
                    <option value="eu-west-3">EU (Paris)</option>
                    <option value="sa-east-1">South America (São Paulo)</option>
                    <option value="cn-north-1">China (Beijing)</option>
                    <option value="cn-northwest-1">China (Ningxia)</option>
                </select>
                <span class="description">choose the region your bucket is in</span>
                <br>

                <input name="s3Bucket" class="regular-text" id="s3Bucket" value="<?php echo esc_attr($this->s3Bucket) ?>" placeholder="<?php echo __('S3 Bucket name', 'static-html-output-plugin');?>" />
                <span class="description">ie, my-static-site</span>
                <br>

                <input name="cfDistributionId" class="regular-text" id="cfDistributionId" value="<?php echo esc_attr($this->cfDistributionId) ?>" placeholder="<?php echo __('CloudFront DistributionId', 'static-html-output-plugin');?>" />
                <span class="description">ie, ABC123DEFX</span>
                <br>
                <br>
</span>

                <fieldset>
                    <label for="sendViaBUNNYCDN">
                    <input name="sendViaBUNNYCDN" id="sendViaBUNNYCDN" value="1" type="checkbox" <?php if ($this->sendViaBUNNYCDN == 1) echo "checked"; ?> />
                        <span><?php echo __('Transfer files via BunnyCDN', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

<span class="bunnycdn">
                <input name="bunnycdnPullZoneName" class="regular-text" id="bunnycdnPullZoneName" value="<?php echo esc_attr($this->bunnycdnPullZoneName) ?>" placeholder="<?php echo __('Pull Zone', 'static-html-output-plugin');?>" />
                <span class="description">ie, mybunnypullzone, etc</span>
                <br>

                <input name="bunnycdnAPIKey" class="regular-text" id="bunnycdnAPIKey" type='password' value="<?php echo esc_attr($this->bunnycdnAPIKey) ?>" placeholder="<?php echo __('API Key', 'static-html-output-plugin');?>" />
                <br>

                <input class="regular-text" name="bunnycdnPath" id="bunnycdnPath" value="<?php echo esc_attr($this->bunnycdnPath) ?>" placeholder="<?php echo __('BunnyCDN Remote Path', 'static-html-output-plugin');?>" />
                <span class="description">will attempt to create folder recursively if non-existent</span>
                <br>
                <br>
</span>
                <fieldset>
                    <label for="sendViaDropbox">
                    <input name="sendViaDropbox" id="sendViaDropbox" value="1" type="checkbox" <?php if ($this->sendViaDropbox == 1) echo "checked"; ?> <?php if (floatval(PHP_VERSION) < 5) { echo 'disabled'; } ?> />
                        <span><?php echo __('Transfer files via Dropbox', 'static-html-output-plugin');?></span>
                        <span style="color:red;"><?php if (floatval(PHP_VERSION) < 5) { echo 'Requires PHP >= 7, you have ' . PHP_VERSION; } ?></span>
                    </label>
                </fieldset>


<span class="dropbox">
		<input name="dropboxAppKey" class="regular-text" id="dropboxAppKey" value="<?php echo esc_attr($this->dropboxAppKey) ?>" placeholder="<?php echo __('Dropbox app key', 'static-html-output-plugin');?>" />

                <span class="description">ie, 'llkjhlkewedsc'</span>
                <br>

                <input name="dropboxAppSecret" class="regular-text" id="dropboxAppSecret" value="<?php echo esc_attr($this->dropboxAppSecret) ?>" placeholder="<?php echo __('Dropbox app secret', 'static-html-output-plugin');?>" />
                <span class="description">ie, 'vsndbvfjhsdfs'</span>
                <br>

                <input name="dropboxAccessToken" class="regular-text" id="dropboxAccessToken" value="<?php echo esc_attr($this->dropboxAccessToken) ?>" placeholder="<?php echo __('Dropbox access token', 'static-html-output-plugin');?>" />
                <span class="description"><a href="https://blogs.dropbox.com/developers/2014/05/generate-an-access-token-for-your-own-account/" target="_blank">How do I get this?</a></span>
                <br>

                <input name="dropboxFolder" class="regular-text" id="dropboxFolder" value="<?php echo esc_attr($this->dropboxFolder) ?>" placeholder="<?php echo __('Dropbox folder', 'static-html-output-plugin');?>" />
                <span class="description">where you want this to be transferred to in your Dropbox account (ie, /teststatic)</span>
                <br>
                <br>
</span>

                <fieldset>
                    <label for="sendViaGithub">
                    <input name="sendViaGithub" id="sendViaGithub" value="1" type="checkbox" <?php if ($this->sendViaGithub == 1) echo "checked"; ?> />
                        <span><?php echo __('Transfer files via GitHub', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>


<span class="github">
		<input name="githubPersonalAccessToken" class="regular-text" id="githubPersonalAccessToken" value="<?php echo esc_attr($this->githubPersonalAccessToken) ?>" placeholder="<?php echo __('GitHub personal access token', 'static-html-output-plugin');?>" />

                <span class="description"><a href="https://github.com/settings/tokens/new" target="_blank">How do I get this?</a></span>
                <br>

                <input name="githubRepo" class="regular-text" id="githubRepo" value="<?php echo esc_attr($this->githubRepo) ?>" placeholder="<?php echo __('GitHub repository', 'static-html-output-plugin');?>" />
                <span class="description">ie, 'mystaticsite'</span>
                <br>

                <input name="githubBranch" class="regular-text" id="githubBranch" value="<?php echo esc_attr($this->githubBranch) ?>" placeholder="<?php echo __('GitHub branch', 'static-html-output-plugin');?>" />
                <span class="description">usually 'master' or 'gh-pages'</span>
                <br>

                <input name="githubPath" class="regular-text" id="githubPath" value="<?php echo esc_attr($this->githubPath) ?>" placeholder="<?php echo __('GitHub path', 'static-html-output-plugin');?>" />
                <span class="description">Usually the repository root (leave this blank) or the 'doc' folder</span>
                <br>
                <br>
</span>
                <fieldset>
                    <label for="sendViaNetlify">
                    <input name="sendViaNetlify" id="sendViaNetlify" value="1" type="checkbox" <?php if ($this->sendViaNetlify == 1) echo "checked"; ?> />
                        <span><?php echo __('Transfer files via Netlify', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>

<span class="netlify">

		<input name="netlifyPersonalAccessToken" class="regular-text" id="netlifyPersonalAccessToken" value="<?php echo esc_attr($this->netlifyPersonalAccessToken) ?>" placeholder="<?php echo __('Netlify personal access token', 'static-html-output-plugin');?>" />

                <span class="description"><a href="https://app.netlify.com/account/applications/personal" target="_blank">How do I get this?</a></span>
                <br>

                <input name="netlifySiteID" class="regular-text" id="netlifySiteID" value="<?php echo esc_attr($this->netlifySiteID) ?>" placeholder="<?php echo __('Netlify site ID', 'static-html-output-plugin');?>" />
                <span class="description">ie, 'mystaticsite'</span>
                <br>
                <br>
</span>



					<p class="submit">
            <?php wp_nonce_field($this->onceAction) ?>
						<input id="formActionHiddenField" class="hiddenActionField" type="hidden" name="action" value="wp_static_html_output_ajax" />
						<input id="hiddenNonceField" type="hidden" name="nonce" value="<?php echo $ajax_nonce; ?>" />
						<input id="hiddenAJAXAction" type="hidden" name="ajax_action" value="" />
						<input name="staticExportSettings" class="hiddenSettingsField" type="hidden" name="action" value="" />
						<input class="saveSettingsButton button-primary" value="Save current options" />
                        <button class="button addAnotherTargetButton">Add another export target</button>
                        <button class="button removeTargetButton">Remove this export target</button>
					</p>
						</div>
					</div>

<label>Poll interval <input id="pollIntervalSetting" value="500" /> </label>
<?php set_time_limit(600); ?>

Current timeout value <?php echo ini_get('max_execution_time'); ?>

 PHP Version: <?php echo PHP_VERSION; ?>

				</form>
					<div class="postbox">
						<div class="handlediv" title="Click to toggle"><br /></div>

              <h3 class="hndle"><span><?php echo __('Export your site', 'static-html-output-plugin');?></span></h3>

              <div class="inside">
                <p>

    <div>
        <img src="<?php echo plugins_url('../images/dashinfinity.gif', __FILE__); ?>" id="progress" />
        <div id="donateText">
            Thanks for using this plugin. If you're liking it, please <a target="_blank" href="https://wordpress.org/plugins/static-html-output-plugin/#reviews">leave a review</a>. Having trouble? <a target="_blank" href="https://github.com/leonstafford/wordpress-static-html-plugin/issues">Report your issue</a> and include the export log which is output below. For feature requests or custom WordPress development, send me an email: <a target="_blank" href="mailto:leonstafford@protonmail.com">leonstafford@protonmail.com</a></i>
        </div>

        <h2 style="clear:both;">Export Log</h2>

        <textarea id="exportStatus">
Your progress will update here every few seconds and this text area will automatically resize to fit the contents of the full log...
        </textarea>
    </div>


                  <p>
                    <i>Clicking the button below will start the process of generating a static site from your WordPress installation. Depending on the size of your website, this process may take some time.</i>
                  </p>

					<p class="submit">
            <?php wp_nonce_field($this->onceAction) ?>
						<input id="startExportButton" class="button-primary" value="Start static site export" />
					</p>
                </p>
						</div>
					</div>
			</div>
		</div>
	</div>
</div>
