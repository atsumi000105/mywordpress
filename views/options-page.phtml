<?php
/**
 * @package WP Static HTML Output
 *
 * Copyright (c) 2011 Leon Stafford
 */

$settings = esc_html($this->staticExportSettings);
if ($settings == '') {
    $settings = 'no existing settings found';
}

$ajax_nonce = wp_create_nonce( 'wpstatichtmloutput' );

?>

<script>
var settings = '<?php echo $settings; ?>';
var uploadsDir = '<?php echo $this->wpUploadsDir; ?>';
var pluginDir = '<?php echo $this->wpPluginDir; ?>';
var pollingInterval = 5000;
var exportTargets = [];
var current_deployment_method = 'folder';

jQuery(document).ready(function($){
    if (Notification.permission !== "granted") {
        Notification.requestPermission();
    }

	function callToAction() {
		// check how many successful exports and present user with a relevant call to action
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('get_number_of_successes');
        archives = $('.options-form');
        newSettings = $(".options-form").serialize();
        $(".hiddenSettingsField").val(newSettings);
        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(number_of_successes) {
				if (number_of_successes == 1) {
					$('#happy1stExport').show();
				} else if (number_of_successes == 5) { 
					$('#happy5thExport').show();
				} else if (number_of_successes == 10) { 
					$('#happy10thExport').show();
				} else if (number_of_successes % 10 === 0) { 
					$('#rateThisPlugin').show();
				} else if (number_of_successes > 100) { 
					$('#donateText').show();
				}

				// get back to main execution
				processExportTargets();
            },
            error: function(serverResponse) {
				console.log('# successes:');
				console.log(serverResponse);
            }
        });

	}
	
    function notifyMe() {
      if (!Notification) {
        alert('All exports are complete!.'); 
        return;
      }

      if (Notification.permission !== "granted") {
        Notification.requestPermission();
      } else {
        var notification = new Notification('WP Static HTML Export', {
          icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Wordpress_Shiny_Icon.svg/768px-Wordpress_Shiny_Icon.svg.png',
          body: "Exports have finished!",
        });

        notification.onclick = function () {
          parent.focus();
          window.focus();
          this.close();
        };
      }
    }

	/* 
		TODO: quick win to get the select menu options to behave like the sendViaFTP, etc checkboxes
	*/
	function setDeploymentMethod(selected_deployment_method) {
		current_deployment_method = selected_deployment_method;


		// TODO: uncheck all options before checking the correct one


		switch (selected_deployment_method) {
			case 'zip':
				$('#createZip').attr('checked', 'checked');
				$('#retainZipFile').attr('checked', 'checked');
			break;	

			case 'dropbox':
				$('#sendViaDropbox').attr('checked', 'checked');
			break;	

			case 'github':
				$('#sendViaGithub').attr('checked', 'checked');
			break;	

			case 'bunnycdn':
				$('#sendViaBUNNYCDN').attr('checked', 'checked');
			break;	

			case 's3':
				$('#sendViaS3').attr('checked', 'checked');
			break;	

			case 'netlify':
				$('#sendViaNetlify').attr('checked', 'checked');
			break;	

			case 'ftp':
				$('#sendViaFTP').attr('checked', 'checked');
			break;	

			default:
				console.log('unable to set unknown deployment option');

			break;

		}

	}

	/* 
		render the information and settings blocks based on the deployment method selected
	*/
	function renderSettingsBlock(selected_deployment_method) {
		console.log(selected_deployment_method);

		deployment_options = [
			'zip',
			'ftp',
			'folder',
			's3',
			'dropbox',
			'bunnycdn',
			'netlify',
			'github'
		];

		
		// hide those not selected
        $.each(deployment_options, function(index, deployment_option) {
			$('.' + deployment_option  + '_settings_block').hide();
		});


		
		// show the selected deployment option or none if empty
		if (selected_deployment_method === '') {
			console.log('no deployment option selected');

			// hide export action window
			$('.exportActionsPane').hide();
		} else {
			$('.' + selected_deployment_method  + '_settings_block').show();

			// show export action window
			$('.exportActionsPane').show();
		}

	

	}

	/* 
		event handler
		show any export setting details if the export option is enabled
	*/

	function setExportSettingDetailsVisibility(changed_checkbox) {
		// get name of changed checkbox, ie sendViaGitHub
		checkbox_name = $(changed_checkbox).attr('name');

		// rm "sendVia" and lowercase the rest, leaving "github"
		export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

		// find all inputs starting with the name, ie "githubRepo"
		var export_option_elements = $('.' + export_option_name );

		// log which checkbox has changed in order to process it's settings group visibility
        if($(changed_checkbox).is(":checked")) {
			export_option_elements.show();
			// unhide all the inputs, the following span and the following br
			
        } else {
			// hide all the inputs, the following span and the following br
			export_option_elements.hide();
		}
	}

	// call handler on any checkbox change events
	$('input[type="checkbox"]').change(function() {
		setExportSettingDetailsVisibility(this);
    });

	// handler when deployment method is changed
	$('.selected_deployment_method').change(function() {
		console.log('deployment method changed');

		renderSettingsBlock(this.value);
		setDeploymentMethod(this.value);
    });

	// update base url previews in realtime
	$(document).on('input', 
		'#baseUrl-s3, #baseUrl-ftp, #baseUrl-folder, #baseUrl-dropbox, #baseUrl-github, #baseUrl-netlify, #baseUrl-bunnycdn, #baseUrl-zip', 
		function() {
			updateBaseURLReferences();
		}
	);

	$(document).on('click', '.advanced_settings_header' , function() {
		console.log('toggling');
		$('.advanced_settings').toggle();
	});

	function updateBaseURLReferences() {
		var base_url_previews = $('.base_url_preview' );

		base_url = $('#baseUrl-' + current_deployment_method).val(); 

		// set hidden baseURL field to current option
		$('#baseUrl').val( $('#baseUrl-' + current_deployment_method).val() ); 

		base_url_previews.text(base_url.replace(/\/$/, "") + '/');
	}

    var currentArchive = 1;

	/*

		doAJAXExport can handle from 1 to n actions
		each action runs, with 3 possible results:
			SUCCESS - action is complete
			> 0 - action is in progress inremental task
			ERROR
				
			if an action is successful, and there are other actions queued up,
			it will call the function again with the remaining arguments/actions

			if an action is succesful, and there are no other actions queued,
			it will call processExportTargets() to continue any other exports

			if an action is in progress incremental, it will call itself again,
			with all the same arguments

			if an action fails, ajaxErrorHandler() is called
	*/

	function doAJAXExport() {
		// arguments is not a real array, avoid nastiness by capturing as such
		var args = [];
		for (var i = 0; i < arguments.length; ++i) args[i] = arguments[i];

		var export_action = args[0];

        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val(export_action);
        archives = $('.options-form');
        data = $(archives[0]).serialize();

        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
				// if an action is successful, and there are other actions queued up
				if (serverResponse === 'SUCCESS' && args.length > 1) {
					// rm first action now that it's succeeded
					args.shift();
					// call function with all other actions
					doAJAXExport.apply(this, args);

				// if an action is in progress incremental, it will call itself again
				} else if (serverResponse > 0) {
					doAJAXExport.apply(this, args);
				} else if (serverResponse === 'SUCCESS') {
					// not an incremental action, continue on with export targets
					processExportTargets();
				} else {
					ajaxErrorHandler();
				}
            },
            error: ajaxErrorHandler
        });
	}

    function startExport() {
		// reset UI before export
		$('#happy1stExport').hide();
		$('#happy5thExport').hide();
		$('#happy10thExport').hide();
		$('#rateThisPlugin').hide();
		$('#donateText').hide();

		// reset export targets to avoid having left-overs from a failed run
		exportTargets = [];
	
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('cleanup_working_files');
        archives = $('.options-form');

        if ($('#sendViaGithub').attr('checked') == 'checked') {
            exportTargets.push('GITHUB');
        }
        if ($('#sendViaFTP').attr('checked') == 'checked') {
            exportTargets.push('FTP');
        }
        if ($('#sendViaBUNNYCDN').attr('checked') == 'checked') {
            exportTargets.push('BUNNYCDN');
        }
        if ($('#sendViaDropbox').attr('checked') == 'checked') {
            exportTargets.push('DROPBOX');
        }
        if ($('#sendViaS3').attr('checked') == 'checked') {
            exportTargets.push('S3');
        }
        if ($('#sendViaNetlify').attr('checked') == 'checked') {
            exportTargets.push('NETLIFY');
        }

		// always run cleanup "exportTarget" (TODO: naming to be improved)
		exportTargets.push('TEARDOWN');

		// record successful exports into the db
		exportTargets.push('RECORDSUCCESS');

		// call user to action based on number of exports
		exportTargets.push('CALLTOACTION');

        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
				if ($('#createZip').attr('checked') == 'checked') {
					doAJAXExport('cleanup_leftover_archives', 'start_export', 'crawl_site', 'create_symlink_to_latest_archive', 'post_process_archive_dir', 'create_zip');
				} else {
					doAJAXExport('cleanup_leftover_archives', 'start_export', 'crawl_site', 'create_symlink_to_latest_archive', 'post_process_archive_dir' );
				}
            },
            error: ajaxErrorHandler
        });
    }
    
    function ajaxErrorHandler () {
        $('#progress').attr("src", pluginDir + '../images/fail_icon.png');
        $('#progress').css("width", '123px');
    }

    function processExportTargets () {
		// TODO: optimisation: just call doAJAXExport with shifted arr element (req's consistent naming of exports)

		if( exportTargets.length > 0) {
			switch(target = exportTargets.shift()) {
				case 'GITHUB':
					doAJAXExport('github_prepare_export', 'github_upload_blobs', 'github_finalise_export');
					break;

				case 'FTP':
					doAJAXExport('ftp_prepare_export', 'ftp_transfer_files');
					break;

				case 'BUNNYCDN':
					doAJAXExport('bunnycdn_prepare_export', 'bunnycdn_transfer_files', 'bunnycdn_purge_cache');
					break;

				case 'S3':
					doAJAXExport('s3_prepare_export', 's3_transfer_files', 'cloudfront_invalidate_all_items');
					break;

				case 'DROPBOX':
					doAJAXExport('dropbox_prepare_export', 'dropbox_do_export');
					break;

				case 'NETLIFY':
					doAJAXExport('netlify_do_export');
					break;

				case 'TEARDOWN':
					doAJAXExport('post_export_teardown');
					break;

				case 'RECORDSUCCESS':
					doAJAXExport('record_successful_export');
					break;

				case 'CALLTOACTION':
					callToAction();
					break;

				default:
					// all complete
					$('#progress').attr("src", pluginDir + '../images/greentick.png');
					$('#progress').css("width", '123px');
					notifyMe();
					break; 
			}
		} else {
			$('#progress').attr("src", pluginDir + '../images/greentick.png');
			$('#progress').css("width", '123px');
			notifyMe();
		}
    }

    function saveOptions() {
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('save_options');
        archives = $('.options-form');
        newSettings = $(".options-form").serialize();
        $(".hiddenSettingsField").val(newSettings);
        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
                $('#progress').hide();
                alert('Options have been saved');
            },
            error: function(serverResponse) {
                $('#progress').hide();
            }
        });
    }

    $('#startExportButton').click(function() {
		// set progress image back to original src
		
        $('#progress').attr("src", pluginDir + '../images/dashinfinity.gif');
        $('#progress').css("width", '102px');

        $('#progress').show();
        //$('#donateText').show();
        startExport();
        $('#exportStatus').html('');
        pollingInterval = $('#pollIntervalSetting')[0].value;
        setTimeout(pollStatus, pollingInterval);
    });


    function pollStatus() {
        logFile = uploadsDir + '/WP-STATIC-EXPORT-LOG';

        $.get(logFile, function(data){
            $('#exportStatus').html(data);
            heightLimit = 1000;
            $('#exportStatus').css('height', Math.min($('#exportStatus').prop('scrollHeight'), heightLimit) + "px");
        });
        
        if ($('#progress').attr("src").includes('infinity')) {
            setTimeout(pollStatus, pollingInterval);
        }         
    }

    $('.wrap').on('click', '.removeTargetButton', function(event) {
        event.preventDefault();

        if ($('.options-form').length === 1) {
            alert("Sorry, got to keep at least one settings block around. But, you can delete the values if you like");
        } else {
            $(event.target).closest('.options-form').remove();
        }
    });

    $('.wrap').on('click', '.resetDefaultSettingsButton', function(event) {
        event.preventDefault();

		// call ajax to wipe options table entries for export options
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val('reset_default_settings');
        archives = $('.options-form');
        newSettings = $(".options-form").serialize();
        $(".hiddenSettingsField").val(newSettings);
        data = $(archives[0]).serialize();
        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
				alert("Settings have been reset to default, the page will now be reloaded.");
				window.location.reload(true); 
            },
            error: function(serverResponse) {
				alert("Error encountered in trying to reset settings. Please try refreshing the page.");
            }
        });

		// clean load page, just to be sure all fields are refreshed

    });

    $('.wrap').on('click', '.saveSettingsButton', function(event) {
        event.preventDefault();
        $('#progress').show();
        saveOptions();
    });

    $('.wrap').on('click', '.addAnotherTargetButton', function(event) {
        event.preventDefault();
       $('.options-form:last').clone().insertAfter('.options-form:last');
    });

    //  load existing settings
    if (settings != 'no existing settings found') {
        archives = settings.split('baseUrl=');
        // remove crufty first element
        archives.shift();

        // first run, will populate only form on page
        var targetExportSettingsBlock = $('.options-form')[0];

        // iterate each saved settings chunk and create forms for them
        $.each(archives, function(index, value) {
            renderedExportSettingsBlocks = $('.options-form').length;
            targetExportSettingsBlock = $('.options-form:last');
            archive = 'baseUrl=' + value;
            archive = archive.substring(0, archive.indexOf('&amp;staticExportSettings='));

            settingsBlock = JSON.parse('{"' + decodeURI(archive).replace(/\n/g, ",").replace(/\r/g, ",").replace(/"/g, '\\"').replace(/&amp;/g, '","').replace(/=/g,'":"') + '"}');
        
            $(targetExportSettingsBlock).find('#baseUrl').first().val(decodeURIComponent(settingsBlock.baseUrl));

            $(targetExportSettingsBlock).find('#outputDirectory').val(decodeURIComponent(settingsBlock.outputDirectory));

            additionalUrls = settingsBlock.additionalUrls.split(',');
            newAdditionalUrls = '';

            $.each(additionalUrls, function(index, value) {
               if (value != '') {
                   newAdditionalUrls += decodeURIComponent(value) + "\n"; 
               }
            });

            $(targetExportSettingsBlock).find('#additionalUrls').val(newAdditionalUrls);

			// set text fields
			var textfield_settings = [
				'ftpServer',
				'ftpUsername',
				'ftpPassword',
				'ftpRemotePath',
				'bunnycdnPullZoneName',
				'bunnycdnAPIKey',
				'bunnycdnPath',
				's3Key',
				's3Secret',
				's3Region',
				's3Bucket',
				's3RemotePath',
				'cfDistributionId',
				'dropboxAccessToken',
				'dropboxFolder',
				'githubPersonalAccessToken',
				'githubPath',
				'githubRepo',
				'githubBranch',
				'netlifyPersonalAccessToken',
				'netlifySiteID',
				'basicAuthUser',
				'basicAuthPassword',
				'rewriteWPCONTENT',
				'rewriteTHEMEDIR',
				'rewriteUPLOADS',
				'rewriteTHEMEROOT',
				'rewritePLUGINDIR',
				'rewriteWPINC',
			];

			for (var i = 0, len = textfield_settings.length; i < len; i++) {
				$(targetExportSettingsBlock).find('#' + textfield_settings[i]).first().val(decodeURIComponent(settingsBlock[textfield_settings[i]]));
			}

			// set checkboxes
			var checkbox_settings = [
				'createZip',
				'retainStaticFiles',
				'retainZipFile',
				'sendViaFTP',
				'useActiveFTP',
				'sendViaBUNNYCDN',
				'sendViaS3',
				'sendViaDropbox',
				'sendViaGithub',
				'sendViaNetlify',
				'sendViaBasic', // todo: allow for improved naming of this
				'dontIncludeAllUploadFiles',
			];

			for (var i = 0, len = checkbox_settings.length; i < len; i++) {
				$(targetExportSettingsBlock).find('#' + checkbox_settings[i])[0].checked = settingsBlock[checkbox_settings[i]];
			}

            // if there are more to come, clone and set target
			// TODO: check if this still works, blanking fields
            if (index < (archives.length -1)) {
                $('.options-form:last').clone().insertAfter('.options-form:last');
                targetExportSettingsBlock =  $('.options-form:last');

				for (var i = 0, len = textfield_settings.length; i < len; i++) {
					$(targetExportSettingsBlock).find('#' + textfield_settings[i]).first().val('');
				}

				for (var i = 0, len = checkbox_settings.length; i < len; i++) {
					$(targetExportSettingsBlock).find('#' + checkbox_settings[i]).first().prop('checked', false);
				}
            }
			
        });
    }

	// if rewrite values aren't set yet, populate fields with defaults
	if ( $("#rewriteWPCONTENT").val() == '' || $("#rewriteWPCONTENT").val() == 'undefined') {
		$("#rewriteWPCONTENT").val('contents');
	}

	if ( $("#rewriteTHEMEDIR").val() == '' || $("#rewriteTHEMEDIR").val() == 'undefined') {
		$("#rewriteTHEMEDIR").val('theme');
	}

	if ( $("#rewriteUPLOADS").val() == '' || $("#rewriteUPLOADS").val() == 'undefined') {
		$("#rewriteUPLOADS").val('data');
	}

	if ( $("#rewriteTHEMEROOT").val() == '' || $("#rewriteTHEMEROOT").val() == 'undefined') {
		$("#rewriteTHEMEROOT").val('ui');
	}

	if ( $("#rewritePLUGINDIR").val() == '' || $("#rewritePLUGINDIR").val() == 'undefined') {
		$("#rewritePLUGINDIR").val('lib');
	}

	if ( $("#rewriteWPINC").val() == '' || $("#rewriteWPINC").val() == 'undefined') {
		$("#rewriteWPINC").val('inc');
	}
	/* 
		on page load, show enabed export setting details
		show any export setting details if the export option is checked and not disabled
	*/

	// do for each checkbox starting with sendVia


	$( 'input[id^="sendVia"]' ).each(function( index ) {
		checkbox_name = $(this).attr('name');

		// rm "sendVia" and lowercase the rest, leaving "github"
		export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

		// find all inputs starting with the name, ie "githubRepo"
		var export_option_elements = $('.' + export_option_name );

		// log which checkbox has changed in order to process it's settings group visibility
		if($(this).is(":checked") && $(this).is(":enabled")) {
			export_option_elements.show();
			// unhide all the inputs, the following span and the following br
			
		} else {
			// hide all the inputs, the following span and the following br
			export_option_elements.hide();
		}
	});


	updateBaseURLReferences($('#baseUrl').val());
});
</script>

<?php

function displayCheckbox($template_variables, $field_name, $field_label, $premium = false) {
	// unlock premium options if user has access to use them
	if ( wpsho_fr()->is_not_paying() && $premium) {
		$premium = true;
	} else {
		$premium = false;
	}

	echo "
		<fieldset>
			<label for='{$field_name}'>
				<input name='{$field_name}' id='{$field_name}' value='1' type='checkbox' " . ( $template_variables->{$field_name} == 1 ? 'checked' : '' ) . ($premium ? 'disabled' : '') . " />
				<span>" .  __($field_label, 'static-html-output-plugin') . "</span>
			";

	if ( wpsho_fr()->is_not_paying() && $premium) {
		echo ' <a href="' . wpsho_fr()->get_upgrade_url() . '">' .
			__('Enable premium option', 'static-html-output-plugin') .
		'</a>';
	}
	

	echo "</label>
		</fieldset>
	";
}

function displayTextfield($template_variables, $field_name, $field_label, $description, $password = null) {
	echo "
		<input name='{$field_name}' class='regular-text' id='{$field_name}' type='" . ( $password  ? 'password' : 'text' ) . "' value='". esc_attr($template_variables->ftpServer) . "' placeholder='" .  __($field_label, 'static-html-output-plugin') . "' />
		<span class='description'>$description</span>
		<br>
	";
}
?>


<div class="wrap">
	
	<h2><?php echo __('WP Static HTML Output - Configure & Run', 'static-html-output-plugin');?></h2>

	<div class="postbox-container">
		<div class="metabox-holder">
			<div class="meta-box-sortables ui-sortable">

				<form id="general-options" class="options-form" method="post" action="">

					<div class="postbox">

              <h3>
                <span><?php echo __('Configurable options', 'static-html-output-plugin');?></span>
              </h3>

              <div class="inside">
				<p class="intro-text"> Exporting your static site is easy - just set the options you need below and click on the "Start static site export" at the bottom of the page!
				</p>	


                  <strong><label><?php echo __('Where do you want to deploy your static site to?', 'static-html-output-plugin');?></label></strong>

	<div style="margin-top:10px;margin-bottom:10px;">

<!-- TODO: disable options when not premium -->
<!-- disabled="disabled" -->
<select class="selected_deployment_method" name="selected_deployment_option">
  <option value="">Choose where to deploy your static site to</option>
  <option value="zip">ZIP - a downloadable ZIP file of your statically exported site</option>
  <option value="folder">Folder - a directory on this server</option>
  <option value="ftp">FTP - Transfer your static site to another server</option>
  <option  value="s3">S3 - Amazon's Simple Storage Service</option>
  <option value="bunnycdn">BunnyCDN - a low cost CDN allowing static website hosting</option>
  <option value="dropbox">Dropbox - send your static site to Dropbox</option>
  <option value="github">GitHub - host your site for free on GitHub Pages or commit to a specific repo/branch</option>
  <option value="netlify">Netlify - a static website hosting specialist</option>
</select>

<?php
	if ( wpsho_fr()->is_not_paying()) {
		echo ' <a href="' . wpsho_fr()->get_upgrade_url() . '">' .
			__('Enable premium options', 'static-html-output-plugin') .
		'</a>';
	}
?>

    </div>

<br style="clear:both;" />

<?php

// load up each deployment settings block

$deployment_options = array(
	'zip',
	'ftp',
	'folder',
	's3',
	'dropbox',
	'bunnycdn',
	'netlify',
	'github'

);

foreach($deployment_options as $deployment_option) {

	require_once(__DIR__ . '/' . $deployment_option . '_settings_block.phtml');

}

?>

<!-- placeholder input fields to allow select menu deployment options to use existing behaviour -->
<span class="hiddenExportOptions" style="display:none;">

<input type="text" id="baseUrl" name="baseUrl" value="<?php echo esc_attr($this->baseUrl) ?>" size="50" placeholder="http://mystaticsite.com" />


<?php echo displayCheckbox($this, 'createZip', 'Create a ZIP file of your statically exported site, ready for you to manually deploy. Download link will appear in the Export Log below'); ?>
<?php echo displayCheckbox($this, 'sendViaFTP', 'Transfer files via FTP', 1); ?>
<?php echo displayCheckbox($this, 'sendViaS3', 'Transfer files via S3', 1); ?>
<?php echo displayCheckbox($this, 'sendViaBUNNYCDN', 'Transfer files via BunnyCDN', 1); ?>
<?php echo displayCheckbox($this, 'sendViaDropbox', 'Transfer files via Dropbox', 1); ?>
<?php echo displayCheckbox($this, 'sendViaGithub', 'Transfer files via GitHub', 1); ?>
<?php echo displayCheckbox($this, 'sendViaNetlify', 'Transfer files via Netlify', 1); ?>


</span>


<br />

                  <strong class="advanced_settings_header"><label><?php echo __('Advanced settings (click to toggle)', 'static-html-output-plugin');?></label></strong>


<div class="advanced_settings" style="display:none;">

<br />


<?php echo displayCheckbox($this, 'retainStaticFiles', 'Retain the last exported site folder on server, along with a symlink to it named "latest-1"'); ?>
<?php echo displayCheckbox($this, 'retainZipFile', 'Retain generated zip file on server (this option is soon to be deprecated, but currently required if you chose to generate the ZIP file above)'); ?>

<?php echo displayCheckbox($this, 'sendViaBasic', 'My WP site requires Basic Auth to access'); ?>

<span class="basic">
	<?php echo displayTextfield($this, 'basicAuthUser', 'Basic Auth user', '', ''); ?>
	<?php echo displayTextfield($this, 'basicAuthPassword', 'Basic Auth password', '', 'password'); ?>
</span>

                <p>
                  <strong><label for="outputDirectory"><?php echo __('Override Output Directory', 'static-html-output-plugin');?></label></strong>
                  <p>
                    <i>Just leave this blank and it will write any export files to your WordPress uploads directory at: <?php echo $this->uploadsPath; ?> else, give the full path to the directory on your server</i>
                  </p>

                  <input type="text" id="outputDirectory" name="outputDirectory" value="<?php echo esc_html($this->outputDirectory) ?>" size="50" />
                </p>

                <p>
                  <strong><label for="outputDirectory"><?php echo __('Don\'t include all files from your uploads directory', 'static-html-output-plugin');?></label></strong>
                  <p>
                <fieldset>
                    <label for="dontIncludeAllUploadFiles">
                    <input name="dontIncludeAllUploadFiles" id="dontIncludeAllUploadFiles" value="1" type="checkbox" <?php if ($this->dontIncludeAllUploadFiles == 1) echo "checked"; ?> />
                        <span><?php echo __('Best to leave this unchecked in most cases. Are there some files in your WP uploads directory you don\'t want included in your export? Check this box to limit the export to only files the plugin finds when crawling your site.', 'static-html-output-plugin');?></span>
                    </label>
                </fieldset>
                </p>
                
                <p>
                  <strong><label for="additionalUrls"><?php echo __('Additional Urls', 'static-html-output-plugin');?></label></strong>
                  <p>
                    <i>For a few themes, certain files may not be detected as part of the export process. Enter any such files here, one per line.

                    Enter them as the full URL, including your WordPress site url, ie:</i>
<pre>http://localhost/wp-content/themes/twentyseventeen/banana.jpg
http://172.17.0.3/my_pricelist.pdf</pre>
                  </p>
                  <textarea class="widefat" name="additionalUrls" id="additionalUrls" rows="5" cols="10"><?php echo esc_html($this->additionalUrls) ?></textarea>
                </p>
		<br>


		<strong><label><?php echo __('Path rewriting', 'static-html-output-plugin');?></label></strong>
		<p>In order to hide any trace that your site uses WordPress, the following paths will be rewritten. You can leave these default options in, but for more control, you can overwrite them. They cannot be empty.</p>
			

		<b>/wp-contents</b> will be re-written to <b class="base_url_preview"></b> <input name="rewriteWPCONTENT" class="regular-text rewrite" id="rewriteWPCONTENT" value="<?php echo esc_attr($this->rewriteWPCONTENT) ?>" placeholder="<?php echo __('contents', 'static-html-output-plugin');?>" />
		<br>
		<b><?php echo str_replace(home_url(), '', get_template_directory_uri()); ?></b> will be re-written to <b class="base_url_preview"></b><b>wp-content/themes/</b> <input name="rewriteTHEMEDIR" class="regular-text rewrite" id="rewriteTHEMEDIR" value="<?php echo esc_attr($this->rewriteTHEMEDIR) ?>" placeholder="<?php echo __('theme', 'static-html-output-plugin');?>" />
		<br>
		<b><?php $default_upload_dir = wp_upload_dir(); echo str_replace(ABSPATH, '/', $default_upload_dir['basedir']); ?></b> will be re-written to <b class="base_url_preview"></b><b>wp-content/</b>  <input name="rewriteUPLOADS" class="regular-text rewrite" id="rewriteUPLOADS" value="<?php echo esc_attr($this->rewriteUPLOADS) ?>" placeholder="<?php echo __('data', 'static-html-output-plugin');?>" />
		<br>
		<b><?php echo str_replace(ABSPATH, '/', get_theme_root()); ?></b> will be re-written to <b class="base_url_preview"></b><b>wp-content/</b>  <input name="rewriteTHEMEROOT" class="regular-text rewrite" id="rewriteTHEMEROOT" value="<?php echo esc_attr($this->rewriteTHEMEROOT) ?>" placeholder="<?php echo __('ui', 'static-html-output-plugin');?>" />
		<br>
		<b><?php echo str_replace(ABSPATH, '/', WP_PLUGIN_DIR); ?></b> will be re-written to <b class="base_url_preview"></b><b>wp-content/</b>  <input name="rewritePLUGINDIR" class="regular-text rewrite" id="rewritePLUGINDIR" value="<?php echo esc_attr($this->rewritePLUGINDIR) ?>" placeholder="<?php echo __('lib', 'static-html-output-plugin');?>" />
		<br>
		<b><?php echo '/' . WPINC; ?></b> will be re-written to <b class="base_url_preview"></b> <input name="rewriteWPINC" class="regular-text rewrite" id="rewriteWPINC" value="<?php echo esc_attr($this->rewriteWPINC) ?>" placeholder="<?php echo __('inc', 'static-html-output-plugin');?>" />

		<br>
		<br>
		<strong><label><?php echo __('Scheduled / programmatic exports via WP-Cron', 'static-html-output-plugin');?></label></strong>
		<p>Using the <a href="https://wordpress.org/plugins/wp-crontrol/" target="_blank">WP Crontrol</a> plugin, you can add the following hook to a schedule to trigger an export. This will run your export using the settings you've saved via this screen. Using this method, you can schedule your exports to happen daily or if you're after an on-post publish kind of behaviour, you could set this to every few minutes.</p>
		<input type="text" style="width:340px;" value="wp_static_html_output_server_side_export_hook" disabled />
<?php
	// show upgrade link for those not on professional_edition
	if ( ! wpsho_fr()->is_plan('professional_edition') ) {
		 echo '<a href="' . wpsho_fr()->get_upgrade_url() . '">' .
            __('Upgrade to the Professional Edition for programmatic access', 'static-html-output-plugin') .
            '</a>';
	}
?>
</div> <!-- end advanced settings -->

		<br>

					<p class="submit">
            <?php wp_nonce_field($this->onceAction) ?>
						<input id="formActionHiddenField" class="hiddenActionField" type="hidden" name="action" value="wp_static_html_output_ajax" />
						<input id="hiddenNonceField" type="hidden" name="nonce" value="<?php echo $ajax_nonce; ?>" />
						<input id="hiddenAJAXAction" type="hidden" name="ajax_action" value="" />
						<input name="staticExportSettings" class="hiddenSettingsField" type="hidden" name="action" value="" />
						<button class="saveSettingsButton button-primary">Save current options</button>

<!-- TODO: refactor multiple export targets functionality -->
<span style="display:none;">

                        <button class="button addAnotherTargetButton" disabled>Add another export target</button>
                        <button class="button removeTargetButton">Remove this export target</button>
</span>

                        <button class="button resetDefaultSettingsButton">Reset to default settings</button>
					</p>
						</div>
					</div>

<?php set_time_limit(600); ?>

				</form>



					<div class="postbox exportActionsPane" style="display:none;">
						<div class="handlediv" title="Click to toggle"><br /></div>

              <h3 class="hndle"><span><?php echo __('Export your site', 'static-html-output-plugin');?></span></h3>

              <div class="inside">
                  <p>
                    <i>Clicking the button below will start the process of generating a static site from your WordPress installation. Depending on the size of your website, this process may take some time.</i>
                  </p>

					<p class="submit">
            <?php wp_nonce_field($this->onceAction) ?>
						<button id="startExportButton" class="button-primary">Start static site export</button>
						<button id="downloadZIP" class="button-secondary" disabled>Download your ZIP file (when export is complete)</button>
					</p>
                <p>

    <div>
        <img src="<?php echo plugins_url('../images/dashinfinity.gif', __FILE__); ?>" id="progress" />

        <div id="donateText">
            Thanks for using this plugin. If you're liking it, please <a target="_blank" href="https://wordpress.org/plugins/static-html-output-plugin/#reviews">leave a review</a>. Having trouble? <a target="_blank" href="https://github.com/leonstafford/wordpress-static-html-plugin/issues">Report your issue</a> and include the export log which is output below. For feature requests or custom WordPress development, send me an email: <a target="_blank" href="mailto:leonstafford@protonmail.com">leonstafford@protonmail.com</a></i>
        </div>

        <div id="happy1stExport">
            Happy 1st successful export on the new plugin! You may need to check the output, adjust some settings and do it a few times to fine-tune things.. Having trouble? <a target="_blank" href="https://github.com/leonstafford/wordpress-static-html-plugin/issues">Report your issue</a> and include the export log which is output below. For help, email this plugin's developer: <a target="_blank" href="mailto:leonstafford@protonmail.com">leonstafford@protonmail.com</a></i>
        </div>

        <div id="happy5thExport">
            w00t! 5 successful exports recently, now you're getting the hang of it. Ready to start squeezing more speed from your static site? Contact the developer of this plugin to discuss your website's security and performance concerns: <a target="_blank" href="mailto:leonstafford@protonmail.com">leonstafford@protonmail.com</a></i>
        </div>

        <div id="happy10thExport">
            Congratulations on 10 successful recent exports! Would you like to have your site featured as a case study on WordPress to static HTML optimisation? Send Leon a brief description to get started: <a target="_blank" href="mailto:leonstafford@protonmail.com">leonstafford@protonmail.com</a></i>
        </div>

        <div id="rateThisPlugin"</a>
			We're so happy your sites are exporting now! Please <a target="_blank" href="https://wordpress.org/plugins/static-html-output-plugin/#reviews">leave a review</a>
        </div>

        <h2 style="clear:both;">Export Log</h2>

        <textarea id="exportStatus">
Your progress will update here every few seconds and this text area will automatically resize to fit the contents of the full log...
        </textarea>
    </div>


                </p>
		<label style="display:none;">Poll interval <input id="pollIntervalSetting" value="500" /> </label>
						</div>
					</div>
			</div>
		</div>
	</div>
</div>

<!-- Start of LiveChat (www.livechatinc.com) code -->
<script type="text/javascript">
window.__lc = window.__lc || {};
window.__lc.license = 9890645;
(function() {
  var lc = document.createElement('script'); lc.type = 'text/javascript'; lc.async = true;
  lc.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'cdn.livechatinc.com/tracking.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(lc, s);
})();
</script>
<!-- End of LiveChat code -->
