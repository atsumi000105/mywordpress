<?php
/**
 * @package WP Static HTML Output
 *
 * Copyright (c) 2011 Leon Stafford
 */

?>

<script>
var uploadsDir = '<?php echo $this->wpUploadsDir; ?>';

<?php $upload_dir = wp_upload_dir();?>
var wp_uploads_path = '<?php echo $upload_dir['basedir']; ?>';
var wp_site_path = '<?php echo $this->wp_site_path; ?>';
var logFileURL = uploadsDir + '/WP-STATIC-EXPORT-LOG';
var pluginDir = '<?php echo $this->wpPluginDir; ?>';
var basedir = '<?php echo $this->basedir; ?>';
var wpSiteURL = '<?php echo get_site_url(); ?>/';
var exportTargets = [];
var current_deployment_method = '<?php echo $this->options->selected_deployment_option ? $this->options->selected_deployment_option : 'folder'; ?>';
var exportCommenceTime = '';
var exportDuration = '';
var batchIncrement = 0;
var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
var localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/
var nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;


jQuery(document).ready(function($){
  function saveOptions() {
    $('.hiddenActionField').val('wp_static_html_output_ajax');
    $('#hiddenAJAXAction').val('save_options');

    data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

    $.ajax({
        url: ajaxurl,
        data: data,
        dataType: 'html',
        method: 'POST',
        success: function(serverResponse) {
            $('#progress').hide();
            alert('Options have been saved');
        },
        error: function(serverResponse) {
            $('#progress').hide();
        }
    });
  }

  function millisToMinutesAndSeconds(millis) {
    var minutes = Math.floor(millis / 60000);
    var seconds = ((millis % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
  }

  function processExportTargets () {
  // TODO: optimisation: just call doAJAXExport with shifted arr element (req's consistent naming of exports)

    if( exportTargets.length > 0) {
      switch(target = exportTargets.shift()) {
        case 'GITHUB':
          doAJAXExport('github_prepare_export', 'github_upload_blobs', 'github_finalise_export');
          break;

        case 'FTP':
          doAJAXExport('ftp_prepare_export', 'ftp_transfer_files');
          break;

        case 'BUNNYCDN':
          doAJAXExport('bunnycdn_prepare_export', 'bunnycdn_transfer_files', 'bunnycdn_purge_cache');
          break;

        case 'S3':
          doAJAXExport('s3_prepare_export', 's3_transfer_files', 'cloudfront_invalidate_all_items');
          break;

        case 'DROPBOX':
          doAJAXExport('dropbox_prepare_export', 'dropbox_do_export');
          break;

        case 'NETLIFY':
          doAJAXExport('netlify_do_export');
          break;

        case 'TEARDOWN':
          doAJAXExport('post_export_teardown');
          break;

        default:
          console.log('unexpected return value from export target processing');
          break; 
      }
    } else {
      // if zip was selected, call to get zip name and enable the button with the link to download
      if (current_deployment_method === 'zip') {
        
        zipDownloadLink = uploadsDir + '/WP-STATIC-CURRENT-ARCHIVE';

        // TODO: add better way to get just the archive name/zip name and path
        $.get(zipDownloadLink, function(zipPath){
          parts = zipPath.split('/');
          archiveName = parts.pop() || parts.pop();
          zipURL = uploadsDir + '/' + archiveName + '.zip';
          $('#downloadZIP').attr('href', zipURL);
          $('#downloadZIP').show();
        });
      } else {
        // for other methods, show the Go to my static site link
        $('#goToMyStaticSite').attr('href', $('#baseUrl').val());
        $('#goToMyStaticSite').show();
      }

      // all complete
      exportCompleteTime = + new Date();
      exportDuration = exportCompleteTime - exportCommenceTime;

      $('#exportDuration').text('Process completed in ' +  millisToMinutesAndSeconds(exportDuration) + ' (mins:ss)');
      $('#exportDuration').show();
      $('#progress').hide();
      $("#goToMyStaticSite").focus();
      $('#startExportButton').prop('disabled', false);
      $('.saveSettingsButton').prop('disabled', false);
      $('.resetDefaultSettingsButton').prop('disabled', false);
      $('.cancelExportButton').hide();
      notifyMe();
    }
  }

  function ajaxErrorHandler () {
      $('#progress').hide();
      $('#viewErrorLogButton').show();
      $('.error-help-text').show();
      $("#viewErrorLogButton").focus();
      $('#startExportButton').prop('disabled', false);
      $('.saveSettingsButton').prop('disabled', false);
      $('.resetDefaultSettingsButton').prop('disabled', false);
      $('.cancelExportButton').hide();
  }

  function startExport() {
    // start timer
    exportCommenceTime = + new Date();

    validation_errors = getValidationErrors();

    if (validation_errors !== '') {
      alert(validation_errors);

      return false;
    }

    showProgress();

    // reset export targets to avoid having left-overs from a failed run
    exportTargets = [];

    $('.hiddenActionField').val('wp_static_html_output_ajax');
    $('#hiddenAJAXAction').val('capture_last_deployment');
    archives = $('.options-form');

    if ($('#sendViaGithub').attr('checked') == 'checked') {
        exportTargets.push('GITHUB');
    }
    if ($('#sendViaFTP').attr('checked') == 'checked') {
        exportTargets.push('FTP');
    }
    if ($('#sendViaBUNNYCDN').attr('checked') == 'checked') {
        exportTargets.push('BUNNYCDN');
    }
    if ($('#sendViaDropbox').attr('checked') == 'checked') {
        exportTargets.push('DROPBOX');
    }
    if ($('#sendViaS3').attr('checked') == 'checked') {
        exportTargets.push('S3');
    }
    if ($('#sendViaNetlify').attr('checked') == 'checked') {
        exportTargets.push('NETLIFY');
    }

    // always run cleanup "exportTarget" (TODO: naming to be improved)
    exportTargets.push('TEARDOWN');

    data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

    $.ajax({
        url: ajaxurl,
        data: data,
        dataType: 'html',
        method: 'POST',
        success: function(serverResponse) {
          if (current_deployment_method == 'zip' || current_deployment_method == 'netlify') {
            doAJAXExport('cleanup_working_files', 'cleanup_leftover_archives', 'start_export', 'crawl_site', 'post_process_archive_dir', 'create_zip');
          } else {
            doAJAXExport('cleanup_working_files', 'cleanup_leftover_archives', 'start_export', 'crawl_site', 'post_process_archive_dir');
          }
        },
        error: ajaxErrorHandler
    });

  }

  function clearProgressAndResults() {
    $('#downloadZIP button').hide();
    $('#goToMyStaticSite').hide();
    $('#exportDuration').hide();
    $('.error-help-text').hide();
  }

  function showProgress() {
    clearProgressAndResults();
    $('#progress').show();
  }

  function getValidationErrors() {
    validation_errors = '';
    // check for when targetFolder is showing (plugin reset state)
    if ($('#targetFolder').is(':visible') &&
      (
        $('#targetFolder').val() == '' ||
        ! $('#targetFolder').val().match(/^[0-9a-z]+$/)
      )
    ) {
      validation_errors += 'Target folder may not be empty and only supports a-z, A-Z, 0-9, - and _. Please adjust your settings.';
    }

    if (( $('#baseUrl').val() === undefined ||
        $('#baseUrl').val() == '' ) &&
        !$('#allowOfflineUsage').is(":checked")) {
      validation_errors += "Please set the Base URL field to the address you will host your static site.\n";
    }

    if (!isUrl($('#baseUrl').val()) && !$('#allowOfflineUsage').is(":checked")) {
      validation_errors += "Please set the Base URL field to a valid URL, ie http://mystaticsite.com.\n";
    }

    switch(current_deployment_method) {
      case 'zip':
      break;

      case 'ftp':
        required_fields = {
          ftpServer: 'Please specify the FTP server address needed to transfer your files via FTP',
          ftpUsername: 'Please input an FTP username in order to authenticate when using the FTP deployment method.',
          ftpPassword: 'Please input an FTP password in order to authenticate when using the FTP deployment method.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'folder':
      break;

      case 's3':
        required_fields = {
          s3Key: 'Please input an S3 Key in order to authenticate when using the S3 deployment method.',
          s3Secret: 'Please input an S3 Secret in order to authenticate when using the S3 deployment method.',
          s3Bucket: 'Please input the name of the S3 bucket you are trying to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break;

      case 'dropbox':
        required_fields = {
          dropboxAccessToken: 'Please specify your Dropbox access token in order to deploy to Dropbox.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'bunnycdn':
        required_fields = {
          bunnycdnPullZoneName: 'Please specify your BunnyCDN pull zone name in order to deploy to BunnyCDN.',
          bunnycdnAPIKey: 'Please specify your BunnyCDN API/FTP password in order to deploy to BunnyCDN.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'netlify':
        required_fields = {
          netlifyPersonalAccessToken: 'Please specify your Netlify personal access token in order to deploy to Netlify.',
          netlifySiteID: 'Please specify the id of your Netlify site you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'github':
        required_fields = {
          githubPersonalAccessToken: 'Please specify your GitHub personal access token in order to deploy to GitHub.',
          githubRepo: 'Please specify your GitHub repository name in order to deploy to GitHub.',
          githubBranch: 'Please specify which branch in your GitHub repository you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });

        repo = $('#githubRepo').val();

        if (repo != '') {
          if (repo.split('/').length !== 2) {
            validation_errors += "Please ensure your GitHub repo is specified as USER_OR_ORG_NAME/REPO_NAME\n";
          }
        }
      break; 
    }

    return validation_errors;
  }

  function isUrl(string) {
    if (typeof string !== 'string') {
      return false;
    }

    var match = string.match(protocolAndDomainRE);

    if (!match) {
      return false;
    }

    var everythingAfterProtocol = match[1];

    if (!everythingAfterProtocol) {
      return false;
    }

    if (localhostDomainRE.test(everythingAfterProtocol) ||
      nonLocalhostDomainRE.test(everythingAfterProtocol)) {
      return true;
    }

    return false;
  }

  /*
    doAJAXExport() can handle from 1 to n actions
    each action runs, with 3 possible results:
      SUCCESS - action is complete
      > 0 - action is in progress inremental task
      ERROR
        
      if an action is successful, and there are other actions queued up,
      it will call the function again with the remaining arguments/actions

      if an action is succesful, and there are no other actions queued,
      it will call processExportTargets() to continue any other exports

      if an action is in progress incremental, it will call itself again,
      with all the same arguments

      if an action fails, ajaxErrorHandler() is called
  */
  function doAJAXExport() {
    // arguments is not a real array, avoid nastiness by capturing as such
    var args = [];
    for (var i = 0; i < arguments.length; ++i) args[i] = arguments[i];

    var export_action = args[0];
    var status_text = export_action;

    $('#current_action').text(status_text);    
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val(export_action);
        archives = $('.options-form');
        data = $(archives[0]).serialize();

        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
              // if an action is successful, and there are other actions queued up
              if (serverResponse === 'SUCCESS' && args.length > 1) {
                // rm first action now that it's succeeded
                args.shift();
                // call function with all other actions
                doAJAXExport.apply(this, args);
              // if an action is in progress incremental, it will call itself again
              } else if (serverResponse > 0) {
                doAJAXExport.apply(this, args);

                batchIncrement += 1;
                status_text += ' #' + batchIncrement;
                $('#current_action').text(status_text);    
              } else if (serverResponse === 'SUCCESS') {
                // not an incremental action, continue on with export targets
                processExportTargets();
                batchIncrement = 0;
              } else {
                ajaxErrorHandler();
              }
            },
            error: ajaxErrorHandler
      });
  }

  function updateBaseURLReferences() {
    var base_url_previews = $('.base_url_preview' );

    if ($('#baseUrl-' + current_deployment_method)) {
      base_url = $('#baseUrl-' + current_deployment_method).val(); 

      // set hidden baseURL field to current option
      if (current_deployment_method === 'folder') {
        $('#baseUrl').val( wpSiteURL + $('#targetFolder').val() + '/'); 
      } else {
        $('#baseUrl').val( $('#baseUrl-' + current_deployment_method).val() ); 
      }

      base_url_previews.text(base_url.replace(/\/$/, "") + '/');

      // update the clickable preview url in folder options
      $('#folderPreviewURL').text(wpSiteURL + $('#targetFolder').val() + '/');
      $('#folderPreviewURL').attr('href', (wpSiteURL + $('#targetFolder').val() + '/'));
    }
  }

  /* 
    TODO: quick win to get the select menu options to behave like the sendViaFTP, etc checkboxes
  */
  function setDeploymentMethod(selected_deployment_method) {
    current_deployment_method = selected_deployment_method;

    // TODO: uncheck all options before checking the correct one
    var checkbox_settings = [
      'createZip',
      'sendViaFTP',
      'sendViaBUNNYCDN',
      'sendViaS3',
      'sendViaDropbox',
      'sendViaGithub',
      'sendViaNetlify',
    ];

    for (var i = 0, len = checkbox_settings.length; i < len; i++) {
      $('#' + checkbox_settings[i]).prop('checked', false);
    }

    // hide zip dl link for all
    $('#downloadZIP').hide();

    // set the correct one
    switch (selected_deployment_method) {
      case 'zip':
        $('#createZip').attr('checked', 'checked');
      break;	

      case 'dropbox':
        $('#sendViaDropbox').attr('checked', 'checked');
      break;	

      case 'github':
        $('#sendViaGithub').attr('checked', 'checked');
      break;	

      case 'bunnycdn':
        $('#sendViaBUNNYCDN').attr('checked', 'checked');
      break;	

      case 's3':
        $('#sendViaS3').attr('checked', 'checked');
      break;	

      case 'netlify':
        $('#sendViaNetlify').attr('checked', 'checked');
      break;	

      case 'ftp':
        $('#sendViaFTP').attr('checked', 'checked');
      break;	

      default:

      break;
    }

    // set the selected option in case calling this from outside the event handler
    $('.selected_deployment_method').val(selected_deployment_method);
  }

  function offlineUsageChangeHandler(checkbox) {
    if ($(checkbox).is(':checked')) {
        $('#baseUrl-zip').prop('disabled', true);
    } else {
        $('#baseUrl-zip').prop('disabled', false);
    }
  }

  function setExportSettingDetailsVisibility(changed_checkbox) {
    checkbox_name = $(changed_checkbox).attr('name');
    export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

    var export_option_elements = $('.' + export_option_name );

    if($(changed_checkbox).is(":checked")) {
      export_option_elements.show();
      // unhide all the inputs, the following span and the following br
      } else {
      // hide all the inputs, the following span and the following br
      export_option_elements.hide();
      }
  }

  /* 
    render the information and settings blocks based on the deployment method selected
  */
  function renderSettingsBlock(selected_deployment_method) {
    deployment_options = [
      'zip',
      'ftp',
      'folder',
      's3',
      'dropbox',
      'bunnycdn',
      'netlify',
      'github'
    ];

    // hide those not selected
    $.each(deployment_options, function(index, deployment_option) {
      $('.' + deployment_option  + '_settings_block').hide();
    });

    $('.' + selected_deployment_method  + '_settings_block').show();
  }

  function notifyMe() {
    if (!Notification) {
      alert('All exports are complete!.'); 
      return;
    }

    if (Notification.permission !== "granted") {
      Notification.requestPermission();
    } else {
      var notification = new Notification('WP Static HTML Export', {
        icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Wordpress_Shiny_Icon.svg/768px-Wordpress_Shiny_Icon.svg.png',
        body: "Exports have finished!",
      });

      notification.onclick = function () {
        parent.focus();
        window.focus();
        this.close();
      };
    }
  }


  /*****************************/
  /* END FUNCTION DECLARATIONS */
  /*****************************/


  if (Notification.permission !== "granted") {
      Notification.requestPermission();
  }

  $('#viewErrorLogButton').attr('href', logFileURL);


	$('input[type="checkbox"]').change(function() {
		setExportSettingDetailsVisibility(this);
    });

	// disable zip base url field when offline usage is checked
	$('#allowOfflineUsage').change(function() {
    offlineUsageChangeHandler($(this));
  });

	// handler when deployment method is changed
	$('.selected_deployment_method').change(function() {
		renderSettingsBlock(this.value);
		setDeploymentMethod(this.value);
		updateBaseURLReferences();
    clearProgressAndResults();
    });

	// update base url previews in realtime
	$(document).on('input', 
		'#baseUrl-s3, #baseUrl-ftp, #baseUrl-folder, #baseUrl-dropbox, #baseUrl-github, #baseUrl-netlify, #baseUrl-bunnycdn, #baseUrl-zip, #targetFolder', 
		function() {
			updateBaseURLReferences();
		}
	);

  $(document).on('click', '.nav-tab' , function(evt) {
    evt.preventDefault();
    current_tab = $(this);
    $('.nav-tab').removeClass('nav-tab-active');
    current_tab.addClass('nav-tab-active');
    current_tab_text = current_tab.text();

    switch(current_tab_text) {
      case 'Advanced Options':
		    $('.export_your_site').hide();
		    $('.help_troubleshooting').hide();
		    $('.crawl_settings').hide();
		    $('.processing_settings').hide();
		    $('.advanced_settings').show();
      break;

      case 'Export your site':
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.export_your_site').show();
		    $('.processing_settings').hide();
		    $('.crawl_settings').hide();
      break;

      case 'Help / Troubleshooting':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').show();
		    $('.processing_settings').hide();
		    $('.crawl_settings').hide();
      break;

      case 'Crawling':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.processing_settings').hide();
		    $('.crawl_settings').show();
      break;

      case 'Processing':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.processing_settings').show();
		    $('.crawl_settings').hide();
      break;

    }

    current_tab.blur();
  });

	$(document).on('click', '.advanced_settings_header' , function(evt) {
    evt.preventDefault();
		$('.advanced_settings').toggle();
	});

	$(document).on('submit', '#general-options' , function(evt) {
    evt.preventDefault();
	});

  $('#startExportButton').click(function() {
      $(this).prop('disabled', true);
      $('.saveSettingsButton').prop('disabled', true);
      $('.resetDefaultSettingsButton').prop('disabled', true);
      $('.cancelExportButton').show();
      startExport();
  });

  $('.cancelExportButton').click(function() {
    var reallyCancel = confirm("Stop current export and reload page?");
    if (reallyCancel) {
      window.location = window.location.href;
    }
  });


  $('.wrap').on('click', '.removeTargetButton', function(event) {
      event.preventDefault();

      if ($('.options-form').length === 1) {
          alert("Sorry, got to keep at least one settings block around. But, you can delete the values if you like");
      } else {
          $(event.target).closest('.options-form').remove();
      }
  });

  $('.wrap').on('click', '.resetDefaultSettingsButton', function(event) {
      event.preventDefault();

      // TODO: doesn't need to do so much
      // just POST to reset data function
      // empty all wpsho optoins from wp_meta
      // change from AJAX to a form submit

      // call ajax to wipe options table entries for export options
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('reset_default_settings');
      archives = $('.options-form');
      data = $(archives[0]).serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
      alert("Settings have been reset to default, the page will now be reloaded.");
      window.location.reload(true); 
          },
          error: function(serverResponse) {
      alert("Error encountered in trying to reset settings. Please try refreshing the page.");
          }
      });
  });

  $('.wrap').on('click', '.saveSettingsButton', function(event) {
      event.preventDefault();
      $('#progress').show();
      saveOptions();
  });

  // populate some hidden fields
  $('#basedir').val(basedir);
  $('#wp_site_url').val(wpSiteURL);
  $('#wp_uploads_path').val(wp_uploads_path);
  $('#wp_site_path').val(wp_site_path);

  // call change handler on page load, to set correct state
  offlineUsageChangeHandler($('#allowOfflineUsage'));

	updateBaseURLReferences($('#baseUrl').val());

// TODO: These may still be needed?

//    set and show the previous selected deployment method
  renderSettingsBlock(current_deployment_method);
//
//		// set the select to the current deployment type
  setDeploymentMethod(current_deployment_method);
});
</script>

