<script>
//TODO: in help screen and error dialog, give button to display all client settings (excluding pwds) for easier troubleshooting


var wp_site = <?php echo json_encode($this->wp_site, JSON_FORCE_OBJECT|JSON_UNESCAPED_SLASHES); ?>

// TODO: update this from prapre_for_export() response;
var current_archive = {}; 

var current_deployment_method = '<?php echo $this->options->selected_deployment_option ? $this->options->selected_deployment_option : 'folder'; ?>';

var working_directory = '<?php echo $this->working_directory; ?>';

// TODO: get the log out of the archive, along with it's meta infos
var log_file_url = wp_site.uploads_url + '/WP-STATIC-EXPORT-LOG';

var export_targets = [];
var export_commence_time = '';
var export_duration = '';
var batch_increment = 0;
var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
var localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/
var nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;

jQuery(document).ready(function($){
  function prepareInitialFileList() {
    $('.hiddenActionField').val('wp_static_html_output_ajax');
    $('#hiddenAJAXAction').val('generate_filelist_preview');

    data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

    $.ajax({
        url: ajaxurl,
        data: data,
        dataType: 'html',
        method: 'POST',
        success: function(serverResponse) {
            $('#initial_crawl_list_loader').hide();
            $('#initial_crawl_list_count').text(serverResponse + ' URLs were detected on your site that will be attempted to be crawled.');
            $('#preview_initial_crawl_list_button').show();
        },
        error: function(serverResponse) {
          $('#initial_crawl_list_loader').hide();
          // TODO: surface via ajaxerrorhandler
          console.log('error in generating the initial crawl list');
        }
    });

    // on result, hide progress and show error or update with number of files found
    
  }

  function saveOptions() {
    $('.hiddenActionField').val('wp_static_html_output_ajax');
    $('#hiddenAJAXAction').val('save_options');

    data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

    $.ajax({
        url: ajaxurl,
        data: data,
        dataType: 'html',
        method: 'POST',
        success: function(serverResponse) {
            $('#progress').hide();
            alert('Options have been saved');
        },
        error: function(serverResponse) {
            $('#progress').hide();
        }
    });
  }

  function millisToMinutesAndSeconds(millis) {
    var minutes = Math.floor(millis / 60000);
    var seconds = ((millis % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
  }

  function processExportTargets () {
  // TODO: optimisation: just call doAJAXExport with shifted arr element (req's consistent naming of exports)

    if( export_targets.length > 0) {
      switch(target = export_targets.shift()) {
        case 'GITLAB':
          doAJAXExport('gitlab_prepare_export', 'gitlab_upload_files');
          break;
        case 'BITBUCKET':
          doAJAXExport('bitbucket_prepare_export', 'bitbucket_upload_files');
          break;
        case 'GITHUB':
          doAJAXExport('github_prepare_export', 'github_upload_blobs', 'github_finalise_export');
          break;

        case 'FTP':
          doAJAXExport('ftp_prepare_export', 'ftp_transfer_files');
          break;

        case 'BUNNYCDN':
          doAJAXExport('bunnycdn_prepare_export', 'bunnycdn_transfer_files', 'bunnycdn_purge_cache');
          break;

        case 'S3':
          doAJAXExport('s3_prepare_export', 's3_transfer_files', 'cloudfront_invalidate_all_items');
          break;

        case 'NETLIFY':
          doAJAXExport('netlify_do_export');
          break;

        case 'TEARDOWN':
          doAJAXExport('post_export_teardown');
          break;

        default:
          console.log('unexpected return value from export target processing');
          break; 
      }
    } else {
      // if zip was selected, call to get zip name and enable the button with the link to download
      if (current_deployment_method === 'zip') {
        
        $.get( wp_site.uploads_url + '/WP-STATIC-CURRENT-ARCHIVE',
            function( archive_path ) {
                path_segments = archive_path.split('/');
                current_archive.name = path_segments[path_segments.length - 2];
                zipURL = wp_site.uploads_url + '/' + current_archive.name + '.zip';
                $('#downloadZIP').attr('href', zipURL);
                $('#downloadZIP').show();
            },
            'text'
        );
      } else {
        // for other methods, show the Go to my static site link
        $('#goToMyStaticSite').attr('href', $('#baseUrl').val());
        $('#goToMyStaticSite').show();
      }

      // all complete
      exportCompleteTime = + new Date();
      export_duration = exportCompleteTime - export_commence_time;

      $('#exportDuration').text('Process completed in ' +  millisToMinutesAndSeconds(export_duration) + ' (mins:ss)');
      $('#exportDuration').show();
      $('#progress').hide();
      $("#goToMyStaticSite").focus();
      $('#startExportButton').prop('disabled', false);
      $('.saveSettingsButton').prop('disabled', false);
      $('.resetDefaultSettingsButton').prop('disabled', false);
      $('.cancelExportButton').hide();
      notifyMe();
    }
  }

  function ajaxErrorHandler () {
      $('#progress').hide();
      $('#viewErrorLogButton').show();
      $('.error-help-text').show();
      $("#viewErrorLogButton").focus();
      $('#startExportButton').prop('disabled', false);
      $('.saveSettingsButton').prop('disabled', false);
      $('.resetDefaultSettingsButton').prop('disabled', false);
      $('.cancelExportButton').hide();
  }

  function startExport() {
    // start timer
    export_commence_time = + new Date();

    validation_errors = getValidationErrors();

    if (validation_errors !== '') {
      alert(validation_errors);

      // TODO: place in function that resets any in progress counters, etc
      $('#progress').hide();
      $('#startExportButton').prop('disabled', false);
      $('.saveSettingsButton').prop('disabled', false);
      $('.resetDefaultSettingsButton').prop('disabled', false);
      $('.cancelExportButton').hide();

      return false;
    }

    showProgress();

    // reset export targets to avoid having left-overs from a failed run
    export_targets = [];

    setWPPathRewrites();

    $('.hiddenActionField').val('wp_static_html_output_ajax');
    $('#hiddenAJAXAction').val('prepare_for_export');

    // set the correct one
    switch (current_deployment_method) {
      case 'zip':
        $('#createZip').attr('checked', 'checked');
      break;	

      case 'github':
        export_targets.push('GITHUB');
      break;	

      case 'bitbucket':
        export_targets.push('BITBUCKET');
      break;	

      case 'gitlab':
        export_targets.push('GITLAB');
      break;	

      case 'bunnycdn':
        export_targets.push('BUNNYCDN');
      break;	

      case 's3':
        export_targets.push('S3');
      break;	

      case 'netlify':
        export_targets.push('NETLIFY');
      break;	

      case 'ftp':
        export_targets.push('FTP');
      break;	

      default:

      break;
    }

    data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

    $.ajax({
        url: ajaxurl,
        data: data,
        dataType: 'html',
        method: 'POST',
        success: function(serverResponse) {
          doAJAXExport('crawl_site', 'crawl_again', 'post_process_archive_dir');
        },
        error: ajaxErrorHandler
    });
  }

  function clearProgressAndResults() {
    $('#downloadZIP button').hide();
    $('#goToMyStaticSite').hide();
    $('#exportDuration').hide();
    $('.error-help-text').hide();
  }

  function showProgress() {
    clearProgressAndResults();
    $('#progress').show();
  }

  function getValidationErrors() {
    validation_errors = '';
    // check for when targetFolder is showing (plugin reset state)
    if ($('#targetFolder').is(':visible') &&
      (
        $('#targetFolder').val() == '' ||
        ! $('#targetFolder').val().match(/^[0-9a-zA-Z]+$/)
      )
    ) {
      validation_errors += 'Target folder may not be empty and only supports a-z, A-Z, 0-9, - and _. Please adjust your settings.';
    }

    if (( $('#baseUrl').val() === undefined ||
        $('#baseUrl').val() == '' ) &&
        !$('#allowOfflineUsage').is(":checked")) {
      validation_errors += "Please set the Base URL field to the address you will host your static site.\n";
    }

    // TODO: on new Debian package-managed environment, this was falsely erroring
    if (!isUrl($('#baseUrl').val()) && !$('#allowOfflineUsage').is(":checked")) {
      validation_errors += "Please set the Base URL field to a valid URL, ie http://mystaticsite.com.\n";
    }

    switch(current_deployment_method) {
      case 'zip':
      break;

      case 'ftp':
        required_fields = {
          ftpServer: 'Please specify the FTP server address needed to transfer your files via FTP',
          ftpUsername: 'Please input an FTP username in order to authenticate when using the FTP deployment method.',
          ftpPassword: 'Please input an FTP password in order to authenticate when using the FTP deployment method.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'folder':
      break;

      case 's3':
        required_fields = {
          s3Key: 'Please input an S3 Key in order to authenticate when using the S3 deployment method.',
          s3Secret: 'Please input an S3 Secret in order to authenticate when using the S3 deployment method.',
          s3Bucket: 'Please input the name of the S3 bucket you are trying to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break;

      case 'bunnycdn':
        required_fields = {
          bunnycdnPullZoneName: 'Please specify your BunnyCDN pull zone name in order to deploy to BunnyCDN.',
          bunnycdnAPIKey: 'Please specify your BunnyCDN API/FTP password in order to deploy to BunnyCDN.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'netlify':
        required_fields = {
          netlifyPersonalAccessToken: 'Please specify your Netlify personal access token in order to deploy to Netlify.',
          netlifySiteID: 'Please specify the id of your Netlify site you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 

      case 'github':
        required_fields = {
          ghToken: 'Please specify your GitHub personal access token in order to deploy to GitHub.',
          ghRepo: 'Please specify your GitHub repository name in order to deploy to GitHub.',
          ghBranch: 'Please specify which branch in your GitHub repository you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });

        repo = $('#ghRepo').val();

        if (repo != '') {
          if (repo.split('/').length !== 2) {
            validation_errors += "Please ensure your GitHub repo is specified as USER_OR_ORG_NAME/REPO_NAME\n";
          }
        }
      break; 

      case 'bitbucket':
        required_fields = {
          bbToken: 'Please specify your Bitbucket personal access token in order to deploy to Bitbucket.',
          bbRepo: 'Please specify your Bitbucket repository name in order to deploy to Bitbucket.',
          bbBranch: 'Please specify which branch in your Bitbucket repository you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });

        repo = $('#bbRepo').val();

        if (repo != '') {
          if (repo.split('/').length !== 2) {
            validation_errors += "Please ensure your Bitbucket repo is specified as USER_OR_ORG_NAME/REPO_NAME\n";
          }
        }
      break; 

      case 'gitlab':
        required_fields = {
          glToken: 'Please specify your GitLab personal access token in order to deploy to GitLab.',
          glProject: 'Please specify your GitLab project ID in order to deploy to GitLab.',
          glBranch: 'Please specify which branch in your GitLab repository you want to deploy to.',
        };	

        Object.keys(required_fields).forEach(function(key,index) {
          if ($('#' + key).val() == '') {
            validation_errors += required_fields[key] + "\n";
          }
        });
      break; 
    }

    return validation_errors;
  }

  function isUrl(string) {
    if (typeof string !== 'string') {
      return false;
    }

    var match = string.match(protocolAndDomainRE);

    if (!match) {
      return false;
    }

    var everythingAfterProtocol = match[1];

    if (!everythingAfterProtocol) {
      return false;
    }

    if (localhostDomainRE.test(everythingAfterProtocol) ||
      nonLocalhostDomainRE.test(everythingAfterProtocol)) {
      return true;
    }

    return false;
  }

  /*
    doAJAXExport() can handle from 1 to n actions
    each action runs, with 3 possible results:
      SUCCESS - action is complete
      > 0 - action is in progress inremental task
      ERROR
        
      if an action is successful, and there are other actions queued up,
      it will call the function again with the remaining arguments/actions

      if an action is succesful, and there are no other actions queued,
      it will call processExportTargets() to continue any other exports

      if an action is in progress incremental, it will call itself again,
      with all the same arguments

      if an action fails, ajaxErrorHandler() is called
  */
  function doAJAXExport() {
    // arguments is not a real array, avoid nastiness by capturing as such
    var args = [];
    for (var i = 0; i < arguments.length; ++i) args[i] = arguments[i];

    var export_action = args[0];
    var status_text = export_action;

    $('#current_action').text(status_text);    
        $('.hiddenActionField').val('wp_static_html_output_ajax');
        $('#hiddenAJAXAction').val(export_action);

        data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

        $.ajax({
            url: ajaxurl,
            data: data,
            dataType: 'html',
            method: 'POST',
            success: function(serverResponse) {
              // if an action is successful, and there are other actions queued up
              if (serverResponse === 'SUCCESS' && args.length > 1) {
                batch_increment = 0;
                // rm first action now that it's succeeded
                args.shift();
                // call function with all other actions
                doAJAXExport.apply(this, args);
              // if an action is in progress incremental, it will call itself again
              } else if (serverResponse > 0) {
                doAJAXExport.apply(this, args);

                batch_increment += 1;
                status_text += ' #' + batch_increment;
                $('#current_action').text(status_text);    
              } else if (serverResponse === 'SUCCESS') {
                // not an incremental action, continue on with export targets
                processExportTargets();
                batch_increment = 0;
              } else {
                ajaxErrorHandler();
              }
            },
            error: ajaxErrorHandler
      });
  }

  function updateBaseURLReferences() {
    var base_url_previews = $('.base_url_preview' );

    if ($('#baseUrl-' + current_deployment_method)) {
      base_url = $('#baseUrl-' + current_deployment_method).val(); 

      // set hidden baseURL field to current option
      if (current_deployment_method === 'folder') {
        $('#baseUrl').val(wp_site.site_url + $('#targetFolder').val() + '/'); 
      } else {
        $('#baseUrl').val($('#baseUrl-' + current_deployment_method).val()); 
      }

      base_url_previews.text(base_url.replace(/\/$/, "") + '/');

      // update the clickable preview url in folder options
      $('#folderPreviewURL').text(wp_site.site_url + $('#targetFolder').val() + '/');
      $('#folderPreviewURL').attr('href', (wp_site.site_url + $('#targetFolder').val() + '/'));
    }
  }

  /* 
    TODO: quick win to get the select menu options to behave like the sendViaFTP, etc checkboxes
  */
    // TODO: remove this completely?
  function setDeploymentMethod(selected_deployment_method) {
    // hide zip dl link for all
    $('#downloadZIP').hide();
    current_deployment_method = selected_deployment_method;

    // set the selected option in case calling this from outside the event handler
    $('.selected_deployment_method').val(selected_deployment_method);
  }

  function offlineUsageChangeHandler(checkbox) {
    if ($(checkbox).is(':checked')) {
        $('#baseUrl-zip').prop('disabled', true);
    } else {
        $('#baseUrl-zip').prop('disabled', false);
    }
  }

  function setExportSettingDetailsVisibility(changed_checkbox) {
    checkbox_name = $(changed_checkbox).attr('name');
    export_option_name = checkbox_name.replace('sendVia', '').toLowerCase();

    var export_option_elements = $('.' + export_option_name );

    if($(changed_checkbox).is(":checked")) {
      export_option_elements.show();
      // unhide all the inputs, the following span and the following br
      } else {
      // hide all the inputs, the following span and the following br
      export_option_elements.hide();
      }
  }

  /* 
    render the information and settings blocks based on the deployment method selected
  */
  function renderSettingsBlock(selected_deployment_method) {
    deployment_options = [
      'zip',
      'ftp',
      'folder',
      's3',
      'bunnycdn',
      'netlify',
      'github',
      'gitlab',
      'bitbucket'
    ];

    // hide those not selected
    $.each(deployment_options, function(index, deployment_option) {
      $('.' + deployment_option  + '_settings_block').hide();
    });

    $('.' + selected_deployment_method  + '_settings_block').show();
  }

  function notifyMe() {
    if (!Notification) {
      alert('All exports are complete!.'); 
      return;
    }

    if (Notification.permission !== "granted") {
      Notification.requestPermission();
    } else {
      var notification = new Notification('WP Static HTML Export', {
        icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Wordpress_Shiny_Icon.svg/768px-Wordpress_Shiny_Icon.svg.png',
        body: "Exports have finished!",
      });

      notification.onclick = function () {
        parent.focus();
        window.focus();
        this.close();
      };
    }
  }

  function setWPPathRewrites() {
    $('#new_wp_content_path').val( '/' + $('#rewriteWPCONTENT').val());
  
    $('#new_themes_path').val(
      $('#new_wp_content_path').val() + '/' + $('#rewriteTHEMEROOT').val());
  
    $('#new_active_theme_path').val(
      $('#new_themes_path').val() + '/' + $('#rewriteTHEMEDIR').val());
  
    $('#new_uploads_path').val(
      $('#new_wp_content_path').val() + '/' + $('#rewriteUPLOADS').val());
  
    $('#new_plugins_path').val(
      $('#new_wp_content_path').val() + '/' + $('#rewritePLUGINDIR').val());
  
    $('#new_wpinc_path').val('/' + $('#rewriteWPINC').val());
  }


  /*****************************/
  /* END FUNCTION DECLARATIONS */
  /*****************************/


  if (Notification.permission !== "granted") {
      Notification.requestPermission();
  }

  $('#viewErrorLogButton').attr('href', log_file_url);

	$('input[type="checkbox"]').change(function() {
		setExportSettingDetailsVisibility(this);
    });

	// disable zip base url field when offline usage is checked
	$('#allowOfflineUsage').change(function() {
    offlineUsageChangeHandler($(this));
  });

	// handler when deployment method is changed
	$('.selected_deployment_method').change(function() {
		renderSettingsBlock(this.value);
		setDeploymentMethod(this.value);
		updateBaseURLReferences();
    clearProgressAndResults();
    });

	// update base url previews in realtime
	$(document).on('input', 
		'#baseUrl-s3, #baseUrl-ftp, #baseUrl-folder, #baseUrl-github, #baseUrl-bitbucket, #baseUrl-gitlab, #baseUrl-netlify, #baseUrl-bunnycdn, #baseUrl-zip, #targetFolder', 
		function() {
			updateBaseURLReferences();
		}
	);

  $(document).on('click', '.nav-tab' , function(evt) {
    evt.preventDefault();
    current_tab = $(this);
    $('.nav-tab').removeClass('nav-tab-active');
    current_tab.addClass('nav-tab-active');
    current_tab_text = current_tab.text();

    switch(current_tab_text) {
      case 'Advanced Options':
		    $('.export_your_site').hide();
		    $('.help_troubleshooting').hide();
		    $('.crawl_settings').hide();
		    $('.processing_settings').hide();
		    $('.advanced_settings').show();
      break;

      case 'Export your site':
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.export_your_site').show();
		    $('.processing_settings').hide();
		    $('.crawl_settings').hide();
      break;

      case 'Help / Troubleshooting':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').show();
		    $('.processing_settings').hide();
		    $('.crawl_settings').hide();
      break;

      case 'Crawling':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.processing_settings').hide();
		    $('.crawl_settings').show();
      break;

      case 'Processing':
		    $('.export_your_site').hide();
		    $('.advanced_settings').hide();
		    $('.help_troubleshooting').hide();
		    $('.processing_settings').show();
		    $('.crawl_settings').hide();
      break;

    }

    current_tab.blur();
  });

	$(document).on('submit', '#general-options' , function(evt) {
    evt.preventDefault();
	});

  $('#startExportButton').click(function() {
      $(this).prop('disabled', true);
      $('.saveSettingsButton').prop('disabled', true);
      $('.resetDefaultSettingsButton').prop('disabled', true);
      $('.cancelExportButton').show();
      startExport();
  });

  $('.cancelExportButton').click(function() {
    var reallyCancel = confirm("Stop current export and reload page?");
    if (reallyCancel) {
      window.location = window.location.href;
    }
  });

  $('.wrap').on('click', '.resetDefaultSettingsButton', function(event) {
      event.preventDefault();

      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('reset_default_settings');

      data = $(".options-form :input")
        .filter(function(index, element) {
            return $(element).val() != '';
        })
        .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
      alert("Settings have been reset to default, the page will now be reloaded.");
      window.location.reload(true); 
          },
          error: function(serverResponse) {
      alert("Error encountered in trying to reset settings. Please try refreshing the page.");
          }
      });
  });

  $('.wrap').on('click', '.saveSettingsButton', function(event) {
      event.preventDefault();
      $('#progress').show();
      saveOptions();
  });

  $('.wrap').on('click', '#ftp-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_ftp');

      button = event.currentTarget;
      spinner = $('button').siblings('div.spinner')
      spinner.show();

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            if (serverResponse === 'SUCCESS') {
                alert('FTP Connection/Upload Test Successful');
            } else {
                alert('FAIL: Unable to complete test upload to FTP');
            }

            spinner.hide();
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to FTP');

            spinner.hide();
          }
      });
  });

  $('.wrap').on('click', '#bitbucket-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_bitbucket');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            if (serverResponse === 'SUCCESS') {
                alert('Bitbucket Connection/Upload Test Successful');
            } else {
                alert('FAIL: Unable to complete test upload to Bitbucket');
            }
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to Bitbucket');
          }
      });
  });

  $('.wrap').on('click', '#netlify-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_netlify');
      $('#netlify_test_results').html('');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            alert('Netlify Connection/Upload Test Successful');

            $('#netlify_test_results').html(serverResponse);
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to Netlify');
          }
      });
  });

  $('.wrap').on('click', '#s3-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_s3');
      $('#s3_test_results').html('');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            alert('S3 Connection/Upload Test Successful');

            $('#s3_test_results').html(serverResponse);
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to S3');
          }
      });
  });

  $('.wrap').on('click', '#bunny-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_bunny');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            if (serverResponse === 'SUCCESS') {
                alert('BunnyCDN Connection/Upload Test Successful');
            } else {
                alert('FAIL: Unable to complete test upload to BunnyCDN');
            }
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to BunnyCDN');
          }
      });
  });

  $('.wrap').on('click', '#gitlab-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_gitlab');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            if (serverResponse === 'SUCCESS') {
                alert('GitLab Connection/Upload Test Successful');
            } else {
                alert('FAIL: Unable to complete test upload to GitLab');
            }
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to GitLab');
          }
      });
  });

  $('.wrap').on('click', '#github-test-button', function(event) {
      event.preventDefault();
      $('.hiddenActionField').val('wp_static_html_output_ajax');
      $('#hiddenAJAXAction').val('test_blob_create');

      data = $(".options-form :input")
          .filter(function(index, element) {
              return $(element).val() != '';
          })
          .serialize();

      $.ajax({
          url: ajaxurl,
          data: data,
          dataType: 'html',
          method: 'POST',
          success: function(serverResponse) {
            if (serverResponse === 'SUCCESS') {
                alert('GitHub Connection/Upload Test Successful');
            } else {
                alert('FAIL: Unable to complete test upload to GitHub');
            }
          },
          error: function(serverResponse) {
            alert('FAIL: Unable to complete test upload to GitHub');
          }
      });
  });

  // populate some hidden fields
  $('#working_directory').val(working_directory);
  $('#wp_site_url').val(wp_site.site_url);
  $('#wp_uploads_path').val(wp_site.wp_uploads_path);
  $('#wp_uploads_url').val(wp_site.uploads_url);
  $('#wp_site_path').val(wp_site.site_path);
  $('#wp_inc').val(wp_site.wp_inc);
  $('#wp_active_theme').val(wp_site.wp_active_theme);
  $('#wp_themes').val(wp_site.wp_themes);
  $('#wp_uploads').val(wp_site.wp_uploads);
  $('#wp_plugins').val(wp_site.wp_plugins);
  $('#wp_content').val(wp_site.wp_content);
  $('.spinner').hide();

  // call change handler on page load, to set correct state
  offlineUsageChangeHandler($('#allowOfflineUsage'));

  updateBaseURLReferences($('#baseUrl').val());

// TODO: These may still be needed?

//    set and show the previous selected deployment method
  renderSettingsBlock(current_deployment_method);
//
//		// set the select to the current deployment type
  setDeploymentMethod(current_deployment_method);

  prepareInitialFileList();

});
</script>

