<div class="processing_settings" style="display:none;">

<table class="form-table">
  <tbody>
    <tr>
      <th scope="row">
        <label for="useRelativeURLs"><?php echo __('Use relative URLs', 'static-html-output-plugin');?></label>
      </th>
      <td>

        <?php $tpl->displayCheckbox($this, 'useRelativeURLs', 'Use relative URLs'); ?>

        <p> URLs in the exported site will be rewritten as <a href="https://www.w3schools.com/tags/tag_base.asp" target="_blank">relative URLs</a>. ie, http://mydomain.com/some_dir/some_file.jpg will become /some_dir/some_file.jpg. A base href will be set to http://mydomain.com/, from which all the relative URLs resolve to. This is another way to shave extra download size from your webpages.</p><br>
        <?php $tpl->displayCheckbox($this, 'useBaseHref', 'Write Base Href for relative URLs'); ?>

        <p style="color:red;"> A base href will be set to your new Base URL, from which all the relative URLs resolve to.REMOVE THIS OPTION</p>
      </td>
    </tr>
      <tr>
        <th scope="row">
          <label for="baseHREF"><?php echo __('Base HREF', 'static-html-output-plugin');?></label>
        </th>
        <td>
          <?php $tpl->displayTextfield($this, 'baseHREF', 'Base HREF', '', ''); ?>

          <p>Setting this will tell the browser to resolve all URLs using this as a base. ie, with a Base HREF of <code>https://mydomain.com</code> and the relative URL setting enabled above, a link on your page of <code>/posts/my_blog_post/</code> will resolve to <code>https://mydomain.com/posts/my_blog_post/</code>. For a more portable exported site, that can be deployed to multiple servers without rewriting each time, set your Base HREF to <code>/</code>.</p>
        </td>
      </tr>
    <tr>
      <th scope="row">
        <label><?php echo __('Path rewriting', 'static-html-output-plugin');?></label>
      </th>
      <td>
        <p>In order to hide any trace that your site uses WordPress, the following paths will be rewritten. You can leave these default options in, but for more control, you can overwrite them.</p><br>
      
        <?php $tpl->displayCheckbox($this, 'rewriteWPPaths', "Rewrite WP paths"); ?>

<?php 

$original = $this->wp_site->getOriginalPaths();

?>
        <table class="form-table">
          <tbody>
            <tr>
              <th scope="row">
                <label for="rewriteWPCONTENT"><?php echo __('WP content', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewriteWPCONTENT" class="regular-text rewrite" id="rewriteWPCONTENT" value="<?php $tpl->ifNotEmpty($this->options->rewriteWPCONTENT, 'contents'); ?>" /><br>

                <i>original: <?php echo $original['wp_contents']; ?></i>
              </td>
            </tr>
            <tr>
              <th scope="row">
                <label for="rewriteTHEMEROOT"><?php echo __('Theme root', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewriteTHEMEROOT" class="regular-text rewrite" id="rewriteTHEMEROOT" value="<?php $tpl->ifNotEmpty($this->options->rewriteTHEMEROOT, 'ui'); ?>" /><br>

                <i>original: <?php echo $original['theme_root']; ?></i>
              </td>
            </tr>
            <tr>
              <th scope="row">
                <label for="rewriteTHEMEDIR"><?php echo __('Theme', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewriteTHEMEDIR" class="regular-text rewrite" id="rewriteTHEMEDIR" value="<?php $tpl->ifNotEmpty($this->options->rewriteTHEMEDIR, 'theme'); ?>" /><br>

                <i>original: <?php echo $original['theme_dir']; ?></i>
              </td>
            </tr>
            <tr>
              <th scope="row">
                <label for="rewriteUPLOADS"><?php echo __('Uploads', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewriteUPLOADS" class="regular-text rewrite" id="rewriteUPLOADS" value="<?php $tpl->ifNotEmpty($this->options->rewriteUPLOADS, 'data'); ?>" /><br>

                <i>original: <?php echo $original['upload_dir']; ?></i>
              </td>
            </tr>
            <tr>
              <th scope="row">
                <label for="rewritePLUGINDIR"><?php echo __('Plugins', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewritePLUGINDIR" class="regular-text rewrite" id="rewritePLUGINDIR" value="<?php $tpl->ifNotEmpty($this->options->rewritePLUGINDIR, 'lib'); ?>" /><br>

                <i>original: <?php echo $original['plugin_dir']; ?></i>
              </td>
            </tr>
            <tr>
              <th scope="row">
                <label for="rewriteWPINC"><?php echo __('WP includes', 'static-html-output-plugin');?></label>
              </th>
              <td>
                <input name="rewriteWPINC" class="regular-text rewrite" id="rewriteWPINC" value="<?php $tpl->ifNotEmpty($this->options->rewriteWPINC, 'inc'); ?>" /><br>

                <i>original: <?php echo $original['includes_dir']; ?></i>
              </td>
            </tr>
          </tbody>
        </table>

      </td>
    </tr>
    <tr>
      <th scope="row">
        <label for="stripping"><?php echo __('Remove cruft', 'static-html-output-plugin');?></label>
      </th>
      <td>

        <?php $tpl->displayCheckbox($this, 'removeConditionalHeadComments', 'Remove conditional comments within HEAD', 'checked'); ?>

        <p>Mostly obsolete, previously used for detecting versions of Internet Explorer and serving different CSS or JS.</p><br>

        <?php $tpl->displayCheckbox($this, 'removeWPMeta', 'Remove WP Meta tags'); ?>

        <p>The <code>&lt;meta&gt; name="generator" content="WordPress 4.9.8" /&gt;</code> type tags.</p><br>

        <?php $tpl->displayCheckbox($this, 'removeWPLinks', 'Remove WP &lt;link&gt; tags'); ?>

        <p>ie, <code>&lt;link& rel="EditURI"...</code> type tags that usually aren't needed.</p><br>

        <?php $tpl->displayCheckbox($this, 'removeHTMLComments', 'Remove HTML comments'); ?>

        <p>ie, <code>&lt;!-- / Yoast SEO plugin. --&gt;</code> type comments that are ridiculously wasting bytes</p><br>
      </td>
    </tr>
    <tr>
      <th scope="row">
        <label for="processing_method"><?php echo __('Processing method', 'static-html-output-plugin');?></label>
      </th>
      <td>

        <select name="processing_method" id="processing_method">
          <option value="intelligent" <?php echo $this->options->processing_method == 'intelligent' ? 'selected' : ''; ?>>Intelligent</option>
          <option value="brute_force" <?php echo $this->options->processing_method == 'brute_force' ? 'selected' : ''; ?>>Brute force</option>
        </select><br>

        <p>Intelligence is usually better than brute force. But when you have a website that's just not properly converting, try the "Brute force" method. This basically treats each file needing processing as a text file, vs trying to understand it as an HTML, CSS or other specific file format.  </p>

      </td>
    </tr>
  </tbody>
</table>

</div><!-- end processing_setings -->
